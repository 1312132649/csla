'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.510
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Projects
    Inherits DataSet
    
    Private tableProject As ProjectDataTable
    
    Private tableProjectResources As ProjectResourcesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Project")) Is Nothing) Then
                Me.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            If (Not (ds.Tables("ProjectResources")) Is Nothing) Then
                Me.Tables.Add(New ProjectResourcesDataTable(ds.Tables("ProjectResources")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project As ProjectDataTable
        Get
            Return Me.tableProject
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProjectResources As ProjectResourcesDataTable
        Get
            Return Me.tableProjectResources
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Projects = CType(MyBase.Clone,Projects)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Project")) Is Nothing) Then
            Me.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
        End If
        If (Not (ds.Tables("ProjectResources")) Is Nothing) Then
            Me.Tables.Add(New ProjectResourcesDataTable(ds.Tables("ProjectResources")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableProject = CType(Me.Tables("Project"),ProjectDataTable)
        If (Not (Me.tableProject) Is Nothing) Then
            Me.tableProject.InitVars
        End If
        Me.tableProjectResources = CType(Me.Tables("ProjectResources"),ProjectResourcesDataTable)
        If (Not (Me.tableProjectResources) Is Nothing) Then
            Me.tableProjectResources.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Projects"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Projects.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableProject = New ProjectDataTable
        Me.Tables.Add(Me.tableProject)
        Me.tableProjectResources = New ProjectResourcesDataTable
        Me.Tables.Add(Me.tableProjectResources)
    End Sub
    
    Private Function ShouldSerializeProject() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProjectResources() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectRowChangeEvent)
    
    Public Delegate Sub ProjectResourcesRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectResourcesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnStarted As DataColumn
        
        Private columnEnded As DataColumn
        
        Friend Sub New()
            MyBase.New("Project")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property StartedColumn As DataColumn
            Get
                Return Me.columnStarted
            End Get
        End Property
        
        Friend ReadOnly Property EndedColumn As DataColumn
            Get
                Return Me.columnEnded
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectRow
            Get
                Return CType(Me.Rows(index),ProjectRow)
            End Get
        End Property
        
        Public Event ProjectRowChanged As ProjectRowChangeEventHandler
        
        Public Event ProjectRowChanging As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleted As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleting As ProjectRowChangeEventHandler
        
        Public Overloads Sub AddProjectRow(ByVal row As ProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProjectRow(ByVal ID As String, ByVal Name As String, ByVal Started As String, ByVal Ended As String) As ProjectRow
            Dim rowProjectRow As ProjectRow = CType(Me.NewRow,ProjectRow)
            rowProjectRow.ItemArray = New Object() {ID, Name, Started, Ended}
            Me.Rows.Add(rowProjectRow)
            Return rowProjectRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProjectDataTable = CType(MyBase.Clone,ProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProjectDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnStarted = Me.Columns("Started")
            Me.columnEnded = Me.Columns("Ended")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnStarted = New DataColumn("Started", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStarted)
            Me.columnEnded = New DataColumn("Ended", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnded)
        End Sub
        
        Public Function NewProjectRow() As ProjectRow
            Return CType(Me.NewRow,ProjectRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProjectRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProjectRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanged(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanging(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleted(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleting(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProjectRow(ByVal row As ProjectRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectRow
        Inherits DataRow
        
        Private tableProject As ProjectDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject = CType(Me.Table,ProjectDataTable)
        End Sub
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tableProject.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableProject.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject.NameColumn) = value
            End Set
        End Property
        
        Public Property Started As String
            Get
                Try 
                    Return CType(Me(Me.tableProject.StartedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject.StartedColumn) = value
            End Set
        End Property
        
        Public Property Ended As String
            Get
                Try 
                    Return CType(Me(Me.tableProject.EndedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject.EndedColumn) = value
            End Set
        End Property
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableProject.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableProject.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableProject.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableProject.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartedNull() As Boolean
            Return Me.IsNull(Me.tableProject.StartedColumn)
        End Function
        
        Public Sub SetStartedNull()
            Me(Me.tableProject.StartedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndedNull() As Boolean
            Return Me.IsNull(Me.tableProject.EndedColumn)
        End Function
        
        Public Sub SetEndedNull()
            Me(Me.tableProject.EndedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProjectRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProjectRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectResourcesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Private columnAssigned As DataColumn
        
        Private columnRole As DataColumn
        
        Friend Sub New()
            MyBase.New("ProjectResources")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Friend ReadOnly Property AssignedColumn As DataColumn
            Get
                Return Me.columnAssigned
            End Get
        End Property
        
        Friend ReadOnly Property RoleColumn As DataColumn
            Get
                Return Me.columnRole
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectResourcesRow
            Get
                Return CType(Me.Rows(index),ProjectResourcesRow)
            End Get
        End Property
        
        Public Event ProjectResourcesRowChanged As ProjectResourcesRowChangeEventHandler
        
        Public Event ProjectResourcesRowChanging As ProjectResourcesRowChangeEventHandler
        
        Public Event ProjectResourcesRowDeleted As ProjectResourcesRowChangeEventHandler
        
        Public Event ProjectResourcesRowDeleting As ProjectResourcesRowChangeEventHandler
        
        Public Overloads Sub AddProjectResourcesRow(ByVal row As ProjectResourcesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProjectResourcesRow(ByVal FirstName As String, ByVal LastName As String, ByVal Assigned As String, ByVal Role As String) As ProjectResourcesRow
            Dim rowProjectResourcesRow As ProjectResourcesRow = CType(Me.NewRow,ProjectResourcesRow)
            rowProjectResourcesRow.ItemArray = New Object() {FirstName, LastName, Assigned, Role}
            Me.Rows.Add(rowProjectResourcesRow)
            Return rowProjectResourcesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProjectResourcesDataTable = CType(MyBase.Clone,ProjectResourcesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProjectResourcesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
            Me.columnAssigned = Me.Columns("Assigned")
            Me.columnRole = Me.Columns("Role")
        End Sub
        
        Private Sub InitClass()
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.columnAssigned = New DataColumn("Assigned", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssigned)
            Me.columnRole = New DataColumn("Role", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRole)
        End Sub
        
        Public Function NewProjectResourcesRow() As ProjectResourcesRow
            Return CType(Me.NewRow,ProjectResourcesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProjectResourcesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProjectResourcesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjectResourcesRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjectResourcesRowChanged(Me, New ProjectResourcesRowChangeEvent(CType(e.Row,ProjectResourcesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjectResourcesRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjectResourcesRowChanging(Me, New ProjectResourcesRowChangeEvent(CType(e.Row,ProjectResourcesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjectResourcesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjectResourcesRowDeleted(Me, New ProjectResourcesRowChangeEvent(CType(e.Row,ProjectResourcesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjectResourcesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjectResourcesRowDeleting(Me, New ProjectResourcesRowChangeEvent(CType(e.Row,ProjectResourcesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProjectResourcesRow(ByVal row As ProjectResourcesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectResourcesRow
        Inherits DataRow
        
        Private tableProjectResources As ProjectResourcesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProjectResources = CType(Me.Table,ProjectResourcesDataTable)
        End Sub
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableProjectResources.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjectResources.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Try 
                    Return CType(Me(Me.tableProjectResources.LastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjectResources.LastNameColumn) = value
            End Set
        End Property
        
        Public Property Assigned As String
            Get
                Try 
                    Return CType(Me(Me.tableProjectResources.AssignedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjectResources.AssignedColumn) = value
            End Set
        End Property
        
        Public Property Role As String
            Get
                Try 
                    Return CType(Me(Me.tableProjectResources.RoleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjectResources.RoleColumn) = value
            End Set
        End Property
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableProjectResources.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableProjectResources.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableProjectResources.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableProjectResources.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAssignedNull() As Boolean
            Return Me.IsNull(Me.tableProjectResources.AssignedColumn)
        End Function
        
        Public Sub SetAssignedNull()
            Me(Me.tableProjectResources.AssignedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoleNull() As Boolean
            Return Me.IsNull(Me.tableProjectResources.RoleColumn)
        End Function
        
        Public Sub SetRoleNull()
            Me(Me.tableProjectResources.RoleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectResourcesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProjectResourcesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProjectResourcesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProjectResourcesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
