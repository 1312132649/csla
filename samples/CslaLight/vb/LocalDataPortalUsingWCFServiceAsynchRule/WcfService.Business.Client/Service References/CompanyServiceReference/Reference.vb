'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Runtime.Serialization

Namespace CompanyServiceReference
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="UserInfo", [Namespace]:="http://schemas.datacontract.org/2004/07/Web")>  _
    Partial Public Class UserInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private IsAuthenticatedField As Boolean
        
        Private RoleField As String
        
        Private UserNameField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property IsAuthenticated() As Boolean
            Get
                Return Me.IsAuthenticatedField
            End Get
            Set
                If (Me.IsAuthenticatedField.Equals(value) <> true) Then
                    Me.IsAuthenticatedField = value
                    Me.RaisePropertyChanged("IsAuthenticated")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property Role() As String
            Get
                Return Me.RoleField
            End Get
            Set
                If (Object.ReferenceEquals(Me.RoleField, value) <> true) Then
                    Me.RoleField = value
                    Me.RaisePropertyChanged("Role")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property UserName() As String
            Get
                Return Me.UserNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.UserNameField, value) <> true) Then
                    Me.UserNameField = value
                    Me.RaisePropertyChanged("UserName")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="CompanyInfo", [Namespace]:="http://schemas.datacontract.org/2004/07/Web")>  _
    Partial Public Class CompanyInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private CompanyIdField As Integer
        
        Private CompanyNameField As String
        
        Private DateAddedField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CompanyId() As Integer
            Get
                Return Me.CompanyIdField
            End Get
            Set
                If (Me.CompanyIdField.Equals(value) <> true) Then
                    Me.CompanyIdField = value
                    Me.RaisePropertyChanged("CompanyId")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CompanyName() As String
            Get
                Return Me.CompanyNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CompanyNameField, value) <> true) Then
                    Me.CompanyNameField = value
                    Me.RaisePropertyChanged("CompanyName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property DateAdded() As String
            Get
                Return Me.DateAddedField
            End Get
            Set
                If (Object.ReferenceEquals(Me.DateAddedField, value) <> true) Then
                    Me.DateAddedField = value
                    Me.RaisePropertyChanged("DateAdded")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.ServiceModel.ServiceContractAttribute()>  _
    Public Interface ICompanyService
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/GetUser", ReplyAction:="http://tempuri.org/ICompanyService/GetUserResponse")>  _
        Function BeginGetUser(ByVal userName As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetUser(ByVal result As System.IAsyncResult) As CompanyServiceReference.UserInfo
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/GetCompany", ReplyAction:="http://tempuri.org/ICompanyService/GetCompanyResponse")>  _
        Function BeginGetCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetCompany(ByVal result As System.IAsyncResult) As CompanyServiceReference.CompanyInfo
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/UpdateCompany", ReplyAction:="http://tempuri.org/ICompanyService/UpdateCompanyResponse")>  _
        Function BeginUpdateCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateCompany(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/InsertCompany", ReplyAction:="http://tempuri.org/ICompanyService/InsertCompanyResponse")>  _
        Function BeginInsertCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndInsertCompany(ByVal result As System.IAsyncResult) As Integer
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/DeleteCompany", ReplyAction:="http://tempuri.org/ICompanyService/DeleteCompanyResponse")>  _
        Function BeginDeleteCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndDeleteCompany(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ICompanyService/IsDuplicateNameCompany", ReplyAction:="http://tempuri.org/ICompanyService/IsDuplicateNameCompanyResponse")>  _
        Function BeginIsDuplicateNameCompany(ByVal companyId As Integer, ByVal companyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndIsDuplicateNameCompany(ByVal result As System.IAsyncResult) As Boolean
    End Interface
    
    Public Interface ICompanyServiceChannel
        Inherits CompanyServiceReference.ICompanyService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute()>  _
    Partial Public Class GetUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As CompanyServiceReference.UserInfo
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CompanyServiceReference.UserInfo)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute()>  _
    Partial Public Class GetCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As CompanyServiceReference.CompanyInfo
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CompanyServiceReference.CompanyInfo)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute()>  _
    Partial Public Class InsertCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Integer
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute()>  _
    Partial Public Class IsDuplicateNameCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute()>  _
    Partial Public Class CompanyServiceClient
        Inherits System.ServiceModel.ClientBase(Of CompanyServiceReference.ICompanyService)
        Implements CompanyServiceReference.ICompanyService
        
        Private onBeginGetUserDelegate As BeginOperationDelegate
        
        Private onEndGetUserDelegate As EndOperationDelegate
        
        Private onGetUserCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetCompanyDelegate As BeginOperationDelegate
        
        Private onEndGetCompanyDelegate As EndOperationDelegate
        
        Private onGetCompanyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateCompanyDelegate As BeginOperationDelegate
        
        Private onEndUpdateCompanyDelegate As EndOperationDelegate
        
        Private onUpdateCompanyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInsertCompanyDelegate As BeginOperationDelegate
        
        Private onEndInsertCompanyDelegate As EndOperationDelegate
        
        Private onInsertCompanyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDeleteCompanyDelegate As BeginOperationDelegate
        
        Private onEndDeleteCompanyDelegate As EndOperationDelegate
        
        Private onDeleteCompanyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginIsDuplicateNameCompanyDelegate As BeginOperationDelegate
        
        Private onEndIsDuplicateNameCompanyDelegate As EndOperationDelegate
        
        Private onIsDuplicateNameCompanyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginOpenDelegate As BeginOperationDelegate
        
        Private onEndOpenDelegate As EndOperationDelegate
        
        Private onOpenCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginCloseDelegate As BeginOperationDelegate
        
        Private onEndCloseDelegate As EndOperationDelegate
        
        Private onCloseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Event GetUserCompleted As System.EventHandler(Of GetUserCompletedEventArgs)
        
        Public Event GetCompanyCompleted As System.EventHandler(Of GetCompanyCompletedEventArgs)
        
        Public Event UpdateCompanyCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event InsertCompanyCompleted As System.EventHandler(Of InsertCompanyCompletedEventArgs)
        
        Public Event DeleteCompanyCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event IsDuplicateNameCompanyCompleted As System.EventHandler(Of IsDuplicateNameCompanyCompletedEventArgs)
        
        Public Event OpenCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event CloseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Function CompanyServiceReference_ICompanyService_BeginGetUser(ByVal userName As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginGetUser
            Return MyBase.Channel.BeginGetUser(userName, password, callback, asyncState)
        End Function
        
        Function CompanyServiceReference_ICompanyService_EndGetUser(ByVal result As System.IAsyncResult) As CompanyServiceReference.UserInfo Implements CompanyServiceReference.ICompanyService.EndGetUser
            Return MyBase.Channel.EndGetUser(result)
        End Function
        
        Private Function OnBeginGetUser(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim userName As String = CType(inValues(0),String)
            Dim password As String = CType(inValues(1),String)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginGetUser(userName, password, callback, asyncState)
        End Function
        
        Private Function OnEndGetUser(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As CompanyServiceReference.UserInfo = CType(Me,CompanyServiceReference.ICompanyService).EndGetUser(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetUserCompleted(ByVal state As Object)
            If (Not (Me.GetUserCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetUserCompleted(Me, New GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetUserAsync(ByVal userName As String, ByVal password As String)
            Me.GetUserAsync(userName, password, Nothing)
        End Sub
        
        Public Overloads Sub GetUserAsync(ByVal userName As String, ByVal password As String, ByVal userState As Object)
            If (Me.onBeginGetUserDelegate Is Nothing) Then
                Me.onBeginGetUserDelegate = AddressOf Me.OnBeginGetUser
            End If
            If (Me.onEndGetUserDelegate Is Nothing) Then
                Me.onEndGetUserDelegate = AddressOf Me.OnEndGetUser
            End If
            If (Me.onGetUserCompletedDelegate Is Nothing) Then
                Me.onGetUserCompletedDelegate = AddressOf Me.OnGetUserCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetUserDelegate, New Object() {userName, password}, Me.onEndGetUserDelegate, Me.onGetUserCompletedDelegate, userState)
        End Sub
        
        Function CompanyServiceReference_ICompanyService_BeginGetCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginGetCompany
            Return MyBase.Channel.BeginGetCompany(companyId, callback, asyncState)
        End Function
        
        Function CompanyServiceReference_ICompanyService_EndGetCompany(ByVal result As System.IAsyncResult) As CompanyServiceReference.CompanyInfo Implements CompanyServiceReference.ICompanyService.EndGetCompany
            Return MyBase.Channel.EndGetCompany(result)
        End Function
        
        Private Function OnBeginGetCompany(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim companyId As Integer = CType(inValues(0),Integer)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginGetCompany(companyId, callback, asyncState)
        End Function
        
        Private Function OnEndGetCompany(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As CompanyServiceReference.CompanyInfo = CType(Me,CompanyServiceReference.ICompanyService).EndGetCompany(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetCompanyCompleted(ByVal state As Object)
            If (Not (Me.GetCompanyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetCompanyCompleted(Me, New GetCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetCompanyAsync(ByVal companyId As Integer)
            Me.GetCompanyAsync(companyId, Nothing)
        End Sub
        
        Public Overloads Sub GetCompanyAsync(ByVal companyId As Integer, ByVal userState As Object)
            If (Me.onBeginGetCompanyDelegate Is Nothing) Then
                Me.onBeginGetCompanyDelegate = AddressOf Me.OnBeginGetCompany
            End If
            If (Me.onEndGetCompanyDelegate Is Nothing) Then
                Me.onEndGetCompanyDelegate = AddressOf Me.OnEndGetCompany
            End If
            If (Me.onGetCompanyCompletedDelegate Is Nothing) Then
                Me.onGetCompanyCompletedDelegate = AddressOf Me.OnGetCompanyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetCompanyDelegate, New Object() {companyId}, Me.onEndGetCompanyDelegate, Me.onGetCompanyCompletedDelegate, userState)
        End Sub
        
        Function CompanyServiceReference_ICompanyService_BeginUpdateCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginUpdateCompany
            Return MyBase.Channel.BeginUpdateCompany(company, callback, asyncState)
        End Function
        
        Sub CompanyServiceReference_ICompanyService_EndUpdateCompany(ByVal result As System.IAsyncResult) Implements CompanyServiceReference.ICompanyService.EndUpdateCompany
            MyBase.Channel.EndUpdateCompany(result)
        End Sub
        
        Private Function OnBeginUpdateCompany(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim company As CompanyServiceReference.CompanyInfo = CType(inValues(0),CompanyServiceReference.CompanyInfo)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginUpdateCompany(company, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateCompany(ByVal result As System.IAsyncResult) As Object()
            CType(Me,CompanyServiceReference.ICompanyService).EndUpdateCompany(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateCompanyCompleted(ByVal state As Object)
            If (Not (Me.UpdateCompanyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateCompanyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateCompanyAsync(ByVal company As CompanyServiceReference.CompanyInfo)
            Me.UpdateCompanyAsync(company, Nothing)
        End Sub
        
        Public Overloads Sub UpdateCompanyAsync(ByVal company As CompanyServiceReference.CompanyInfo, ByVal userState As Object)
            If (Me.onBeginUpdateCompanyDelegate Is Nothing) Then
                Me.onBeginUpdateCompanyDelegate = AddressOf Me.OnBeginUpdateCompany
            End If
            If (Me.onEndUpdateCompanyDelegate Is Nothing) Then
                Me.onEndUpdateCompanyDelegate = AddressOf Me.OnEndUpdateCompany
            End If
            If (Me.onUpdateCompanyCompletedDelegate Is Nothing) Then
                Me.onUpdateCompanyCompletedDelegate = AddressOf Me.OnUpdateCompanyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateCompanyDelegate, New Object() {company}, Me.onEndUpdateCompanyDelegate, Me.onUpdateCompanyCompletedDelegate, userState)
        End Sub
        
        Function CompanyServiceReference_ICompanyService_BeginInsertCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginInsertCompany
            Return MyBase.Channel.BeginInsertCompany(company, callback, asyncState)
        End Function
        
        Function CompanyServiceReference_ICompanyService_EndInsertCompany(ByVal result As System.IAsyncResult) As Integer Implements CompanyServiceReference.ICompanyService.EndInsertCompany
            Return MyBase.Channel.EndInsertCompany(result)
        End Function
        
        Private Function OnBeginInsertCompany(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim company As CompanyServiceReference.CompanyInfo = CType(inValues(0),CompanyServiceReference.CompanyInfo)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginInsertCompany(company, callback, asyncState)
        End Function
        
        Private Function OnEndInsertCompany(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Integer = CType(Me,CompanyServiceReference.ICompanyService).EndInsertCompany(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnInsertCompanyCompleted(ByVal state As Object)
            If (Not (Me.InsertCompanyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InsertCompanyCompleted(Me, New InsertCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InsertCompanyAsync(ByVal company As CompanyServiceReference.CompanyInfo)
            Me.InsertCompanyAsync(company, Nothing)
        End Sub
        
        Public Overloads Sub InsertCompanyAsync(ByVal company As CompanyServiceReference.CompanyInfo, ByVal userState As Object)
            If (Me.onBeginInsertCompanyDelegate Is Nothing) Then
                Me.onBeginInsertCompanyDelegate = AddressOf Me.OnBeginInsertCompany
            End If
            If (Me.onEndInsertCompanyDelegate Is Nothing) Then
                Me.onEndInsertCompanyDelegate = AddressOf Me.OnEndInsertCompany
            End If
            If (Me.onInsertCompanyCompletedDelegate Is Nothing) Then
                Me.onInsertCompanyCompletedDelegate = AddressOf Me.OnInsertCompanyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInsertCompanyDelegate, New Object() {company}, Me.onEndInsertCompanyDelegate, Me.onInsertCompanyCompletedDelegate, userState)
        End Sub
        
        Function CompanyServiceReference_ICompanyService_BeginDeleteCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginDeleteCompany
            Return MyBase.Channel.BeginDeleteCompany(companyId, callback, asyncState)
        End Function
        
        Sub CompanyServiceReference_ICompanyService_EndDeleteCompany(ByVal result As System.IAsyncResult) Implements CompanyServiceReference.ICompanyService.EndDeleteCompany
            MyBase.Channel.EndDeleteCompany(result)
        End Sub
        
        Private Function OnBeginDeleteCompany(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim companyId As Integer = CType(inValues(0),Integer)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginDeleteCompany(companyId, callback, asyncState)
        End Function
        
        Private Function OnEndDeleteCompany(ByVal result As System.IAsyncResult) As Object()
            CType(Me,CompanyServiceReference.ICompanyService).EndDeleteCompany(result)
            Return Nothing
        End Function
        
        Private Sub OnDeleteCompanyCompleted(ByVal state As Object)
            If (Not (Me.DeleteCompanyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DeleteCompanyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DeleteCompanyAsync(ByVal companyId As Integer)
            Me.DeleteCompanyAsync(companyId, Nothing)
        End Sub
        
        Public Overloads Sub DeleteCompanyAsync(ByVal companyId As Integer, ByVal userState As Object)
            If (Me.onBeginDeleteCompanyDelegate Is Nothing) Then
                Me.onBeginDeleteCompanyDelegate = AddressOf Me.OnBeginDeleteCompany
            End If
            If (Me.onEndDeleteCompanyDelegate Is Nothing) Then
                Me.onEndDeleteCompanyDelegate = AddressOf Me.OnEndDeleteCompany
            End If
            If (Me.onDeleteCompanyCompletedDelegate Is Nothing) Then
                Me.onDeleteCompanyCompletedDelegate = AddressOf Me.OnDeleteCompanyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDeleteCompanyDelegate, New Object() {companyId}, Me.onEndDeleteCompanyDelegate, Me.onDeleteCompanyCompletedDelegate, userState)
        End Sub
        
        Function CompanyServiceReference_ICompanyService_BeginIsDuplicateNameCompany(ByVal companyId As Integer, ByVal companyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginIsDuplicateNameCompany
            Return MyBase.Channel.BeginIsDuplicateNameCompany(companyId, companyName, callback, asyncState)
        End Function
        
        Function CompanyServiceReference_ICompanyService_EndIsDuplicateNameCompany(ByVal result As System.IAsyncResult) As Boolean Implements CompanyServiceReference.ICompanyService.EndIsDuplicateNameCompany
            Return MyBase.Channel.EndIsDuplicateNameCompany(result)
        End Function
        
        Private Function OnBeginIsDuplicateNameCompany(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim companyId As Integer = CType(inValues(0),Integer)
            Dim companyName As String = CType(inValues(1),String)
            Return CType(Me,CompanyServiceReference.ICompanyService).BeginIsDuplicateNameCompany(companyId, companyName, callback, asyncState)
        End Function
        
        Private Function OnEndIsDuplicateNameCompany(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = CType(Me,CompanyServiceReference.ICompanyService).EndIsDuplicateNameCompany(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnIsDuplicateNameCompanyCompleted(ByVal state As Object)
            If (Not (Me.IsDuplicateNameCompanyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent IsDuplicateNameCompanyCompleted(Me, New IsDuplicateNameCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub IsDuplicateNameCompanyAsync(ByVal companyId As Integer, ByVal companyName As String)
            Me.IsDuplicateNameCompanyAsync(companyId, companyName, Nothing)
        End Sub
        
        Public Overloads Sub IsDuplicateNameCompanyAsync(ByVal companyId As Integer, ByVal companyName As String, ByVal userState As Object)
            If (Me.onBeginIsDuplicateNameCompanyDelegate Is Nothing) Then
                Me.onBeginIsDuplicateNameCompanyDelegate = AddressOf Me.OnBeginIsDuplicateNameCompany
            End If
            If (Me.onEndIsDuplicateNameCompanyDelegate Is Nothing) Then
                Me.onEndIsDuplicateNameCompanyDelegate = AddressOf Me.OnEndIsDuplicateNameCompany
            End If
            If (Me.onIsDuplicateNameCompanyCompletedDelegate Is Nothing) Then
                Me.onIsDuplicateNameCompanyCompletedDelegate = AddressOf Me.OnIsDuplicateNameCompanyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginIsDuplicateNameCompanyDelegate, New Object() {companyId, companyName}, Me.onEndIsDuplicateNameCompanyDelegate, Me.onIsDuplicateNameCompanyCompletedDelegate, userState)
        End Sub
        
        Private Function OnBeginOpen(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginOpen(callback, asyncState)
        End Function
        
        Private Function OnEndOpen(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndOpen(result)
            Return Nothing
        End Function
        
        Private Sub OnOpenCompleted(ByVal state As Object)
            If (Not (Me.OpenCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent OpenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub OpenAsync()
            Me.OpenAsync(Nothing)
        End Sub
        
        Public Overloads Sub OpenAsync(ByVal userState As Object)
            If (Me.onBeginOpenDelegate Is Nothing) Then
                Me.onBeginOpenDelegate = AddressOf Me.OnBeginOpen
            End If
            If (Me.onEndOpenDelegate Is Nothing) Then
                Me.onEndOpenDelegate = AddressOf Me.OnEndOpen
            End If
            If (Me.onOpenCompletedDelegate Is Nothing) Then
                Me.onOpenCompletedDelegate = AddressOf Me.OnOpenCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginOpenDelegate, Nothing, Me.onEndOpenDelegate, Me.onOpenCompletedDelegate, userState)
        End Sub
        
        Private Function OnBeginClose(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginClose(callback, asyncState)
        End Function
        
        Private Function OnEndClose(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndClose(result)
            Return Nothing
        End Function
        
        Private Sub OnCloseCompleted(ByVal state As Object)
            If (Not (Me.CloseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent CloseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub CloseAsync()
            Me.CloseAsync(Nothing)
        End Sub
        
        Public Overloads Sub CloseAsync(ByVal userState As Object)
            If (Me.onBeginCloseDelegate Is Nothing) Then
                Me.onBeginCloseDelegate = AddressOf Me.OnBeginClose
            End If
            If (Me.onEndCloseDelegate Is Nothing) Then
                Me.onEndCloseDelegate = AddressOf Me.OnEndClose
            End If
            If (Me.onCloseCompletedDelegate Is Nothing) Then
                Me.onCloseCompletedDelegate = AddressOf Me.OnCloseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginCloseDelegate, Nothing, Me.onEndCloseDelegate, Me.onCloseCompletedDelegate, userState)
        End Sub
        
        Protected Overrides Function CreateChannel() As CompanyServiceReference.ICompanyService
            Return New CompanyServiceClientChannel(Me)
        End Function
        
        Private Class CompanyServiceClientChannel
            Inherits ChannelBase(Of CompanyServiceReference.ICompanyService)
            Implements CompanyServiceReference.ICompanyService
            
            Public Sub New(ByVal client As System.ServiceModel.ClientBase(Of CompanyServiceReference.ICompanyService))
                MyBase.New(client)
            End Sub
            
            Public Function BeginGetUser(ByVal userName As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginGetUser
                Dim _args((2) - 1) As Object
                _args(0) = userName
                _args(1) = password
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetUser", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetUser(ByVal result As System.IAsyncResult) As CompanyServiceReference.UserInfo Implements CompanyServiceReference.ICompanyService.EndGetUser
                Dim _args((0) - 1) As Object
                Dim _result As CompanyServiceReference.UserInfo = CType(MyBase.EndInvoke("GetUser", _args, result),CompanyServiceReference.UserInfo)
                Return _result
            End Function
            
            Public Function BeginGetCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginGetCompany
                Dim _args((1) - 1) As Object
                _args(0) = companyId
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("GetCompany", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndGetCompany(ByVal result As System.IAsyncResult) As CompanyServiceReference.CompanyInfo Implements CompanyServiceReference.ICompanyService.EndGetCompany
                Dim _args((0) - 1) As Object
                Dim _result As CompanyServiceReference.CompanyInfo = CType(MyBase.EndInvoke("GetCompany", _args, result),CompanyServiceReference.CompanyInfo)
                Return _result
            End Function
            
            Public Function BeginUpdateCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginUpdateCompany
                Dim _args((1) - 1) As Object
                _args(0) = company
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("UpdateCompany", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndUpdateCompany(ByVal result As System.IAsyncResult) Implements CompanyServiceReference.ICompanyService.EndUpdateCompany
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("UpdateCompany", _args, result)
            End Sub
            
            Public Function BeginInsertCompany(ByVal company As CompanyServiceReference.CompanyInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginInsertCompany
                Dim _args((1) - 1) As Object
                _args(0) = company
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("InsertCompany", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndInsertCompany(ByVal result As System.IAsyncResult) As Integer Implements CompanyServiceReference.ICompanyService.EndInsertCompany
                Dim _args((0) - 1) As Object
                Dim _result As Integer = CType(MyBase.EndInvoke("InsertCompany", _args, result),Integer)
                Return _result
            End Function
            
            Public Function BeginDeleteCompany(ByVal companyId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginDeleteCompany
                Dim _args((1) - 1) As Object
                _args(0) = companyId
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("DeleteCompany", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndDeleteCompany(ByVal result As System.IAsyncResult) Implements CompanyServiceReference.ICompanyService.EndDeleteCompany
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("DeleteCompany", _args, result)
            End Sub
            
            Public Function BeginIsDuplicateNameCompany(ByVal companyId As Integer, ByVal companyName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements CompanyServiceReference.ICompanyService.BeginIsDuplicateNameCompany
                Dim _args((2) - 1) As Object
                _args(0) = companyId
                _args(1) = companyName
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("IsDuplicateNameCompany", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Function EndIsDuplicateNameCompany(ByVal result As System.IAsyncResult) As Boolean Implements CompanyServiceReference.ICompanyService.EndIsDuplicateNameCompany
                Dim _args((0) - 1) As Object
                Dim _result As Boolean = CType(MyBase.EndInvoke("IsDuplicateNameCompany", _args, result),Boolean)
                Return _result
            End Function
        End Class
    End Class
End Namespace
