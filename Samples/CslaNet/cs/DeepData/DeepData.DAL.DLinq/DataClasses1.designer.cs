#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeepData.DAL.DLinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;


	[DatabaseAttribute(Name = "D:\\CSLA\\DEEPDATA\\DEEPDATA\\DEEPDATASTORE.MDF")]
	public partial class DataClasses1DataContext : DataContext
	{

		private static MappingSource mappingSource = new AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertOrder(Order instance);
		partial void UpdateOrder(Order instance);
		partial void DeleteOrder(Order instance);
		partial void InsertOrderLineDetail(OrderLineDetail instance);
		partial void UpdateOrderLineDetail(OrderLineDetail instance);
		partial void DeleteOrderLineDetail(OrderLineDetail instance);
		partial void InsertOrderLine(OrderLine instance);
		partial void UpdateOrderLine(OrderLine instance);
		partial void DeleteOrderLine(OrderLine instance);
		#endregion

		public DataClasses1DataContext() :
			base(Properties.Settings.Default.DeepDataStoreConnectionString, mappingSource)
		{
			OnCreated();
		}

		public DataClasses1DataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClasses1DataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClasses1DataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClasses1DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public Table<Order> Orders
		{
			get
			{
				return GetTable<Order>();
			}
		}

		public Table<OrderLineDetail> OrderLineDetails
		{
			get
			{
				return GetTable<OrderLineDetail>();
			}
		}

		public Table<OrderLine> OrderLines
		{
			get
			{
				return GetTable<OrderLine>();
			}
		}
	}

	[Table(Name = "dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _Id;

		private string _Customer;

		private EntitySet<OrderLine> _OrderLines;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		partial void OnCustomerChanging(string value);
		partial void OnCustomerChanged();
		#endregion

		public Order()
		{
			_OrderLines = new EntitySet<OrderLine>(attach_OrderLines, detach_OrderLines);
			OnCreated();
		}

		[Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int Id
		{
			get
			{
				return _Id;
			}
			set
			{
				if ((_Id == value)) return;
				OnIdChanging(value);
				SendPropertyChanging();
				_Id = value;
				SendPropertyChanged("Id");
				OnIdChanged();
			}
		}

		[Column(Storage = "_Customer", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string Customer
		{
			get
			{
				return _Customer;
			}
			set
			{
				if ((_Customer == value)) return;
				OnCustomerChanging(value);
				SendPropertyChanging();
				_Customer = value;
				SendPropertyChanged("Customer");
				OnCustomerChanged();
			}
		}

		[Association(Name = "Order_OrderLine", Storage = "_OrderLines", OtherKey = "OrderId")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return _OrderLines;
			}
			set
			{
				_OrderLines.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((PropertyChanging != null))
			{
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((PropertyChanged != null))
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderLines(OrderLine entity)
		{
			SendPropertyChanging();
			entity.Order = this;
		}

		private void detach_OrderLines(OrderLine entity)
		{
			SendPropertyChanging();
			entity.Order = null;
		}
	}

	[Table(Name = "dbo.OrderLineDetail")]
	public partial class OrderLineDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderId;

		private int _LineId;

		private int _Id;

		private string _Detail;

		private EntityRef<OrderLine> _OrderLine;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderIdChanging(int value);
		partial void OnOrderIdChanged();
		partial void OnLineIdChanging(int value);
		partial void OnLineIdChanged();
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		partial void OnDetailChanging(string value);
		partial void OnDetailChanged();
		#endregion

		public OrderLineDetail()
		{
			_OrderLine = default(EntityRef<OrderLine>);
			OnCreated();
		}

		[Column(Storage = "_OrderId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int OrderId
		{
			get
			{
				return _OrderId;
			}
			set
			{
				if ((_OrderId != value))
				{
					if (_OrderLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnOrderIdChanging(value);
					SendPropertyChanging();
					_OrderId = value;
					SendPropertyChanged("OrderId");
					OnOrderIdChanged();
				}
			}
		}

		[Column(Storage = "_LineId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LineId
		{
			get
			{
				return _LineId;
			}
			set
			{
				if ((_LineId == value)) return;
				if (_OrderLine.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				OnLineIdChanging(value);
				SendPropertyChanging();
				_LineId = value;
				SendPropertyChanged("LineId");
				OnLineIdChanged();
			}
		}

		[Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int Id
		{
			get
			{
				return _Id;
			}
			set
			{
				if ((_Id == value)) return;
				OnIdChanging(value);
				SendPropertyChanging();
				_Id = value;
				SendPropertyChanged("Id");
				OnIdChanged();
			}
		}

		[Column(Storage = "_Detail", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string Detail
		{
			get
			{
				return _Detail;
			}
			set
			{
				if ((_Detail == value)) return;
				OnDetailChanging(value);
				SendPropertyChanging();
				_Detail = value;
				SendPropertyChanged("Detail");
				OnDetailChanged();
			}
		}

		[Association(Name = "OrderLine_OrderLineDetail", Storage = "_OrderLine", ThisKey = "OrderId,LineId", IsForeignKey = true)]
		public OrderLine OrderLine
		{
			get
			{
				return _OrderLine.Entity;
			}
			set
			{
				OrderLine previousValue = _OrderLine.Entity;
				if (((previousValue == value) && (_OrderLine.HasLoadedOrAssignedValue != false))) return;
				SendPropertyChanging();
				if ((previousValue != null))
				{
					_OrderLine.Entity = null;
					previousValue.OrderLineDetails.Remove(this);
				}
				_OrderLine.Entity = value;
				if ((value != null))
				{
					value.OrderLineDetails.Add(this);
					_OrderId = value.OrderId;
					_LineId = value.Id;
				}
				else
				{
					_OrderId = default(int);
					_LineId = default(int);
				}
				SendPropertyChanged("OrderLine");
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((PropertyChanging != null))
			{
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((PropertyChanged != null))
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderLine")]
	public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderId;

		private int _Id;

		private string _Product;

		private EntitySet<OrderLineDetail> _OrderLineDetails;

		private EntityRef<Order> _Order;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderIdChanging(int value);
		partial void OnOrderIdChanged();
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		partial void OnProductChanging(string value);
		partial void OnProductChanged();
		#endregion

		public OrderLine()
		{
			_OrderLineDetails = new EntitySet<OrderLineDetail>(attach_OrderLineDetails, detach_OrderLineDetails);
			_Order = default(EntityRef<Order>);
			OnCreated();
		}

		[Column(Storage = "_OrderId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int OrderId
		{
			get
			{
				return _OrderId;
			}
			set
			{
				if ((_OrderId != value))
				{
					if (_Order.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnOrderIdChanging(value);
					SendPropertyChanging();
					_OrderId = value;
					SendPropertyChanged("OrderId");
					OnOrderIdChanged();
				}
			}
		}

		[Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int Id
		{
			get
			{
				return _Id;
			}
			set
			{
				if ((_Id == value)) return;
				OnIdChanging(value);
				SendPropertyChanging();
				_Id = value;
				SendPropertyChanged("Id");
				OnIdChanged();
			}
		}

		[Column(Storage = "_Product", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string Product
		{
			get
			{
				return _Product;
			}
			set
			{
				if ((_Product == value)) return;
				OnProductChanging(value);
				SendPropertyChanging();
				_Product = value;
				SendPropertyChanged("Product");
				OnProductChanged();
			}
		}

		[Association(Name = "OrderLine_OrderLineDetail", Storage = "_OrderLineDetails", OtherKey = "OrderId,LineId")]
		public EntitySet<OrderLineDetail> OrderLineDetails
		{
			get
			{
				return _OrderLineDetails;
			}
			set
			{
				_OrderLineDetails.Assign(value);
			}
		}

		[Association(Name = "Order_OrderLine", Storage = "_Order", ThisKey = "OrderId", IsForeignKey = true)]
		public Order Order
		{
			get
			{
				return _Order.Entity;
			}
			set
			{
				var previousValue = _Order.Entity;
				if (((previousValue == value) && (_Order.HasLoadedOrAssignedValue != false))) return;
				SendPropertyChanging();
				if ((previousValue != null))
				{
					_Order.Entity = null;
					previousValue.OrderLines.Remove(this);
				}
				_Order.Entity = value;
				if ((value != null))
				{
					value.OrderLines.Add(this);
					_OrderId = value.Id;
				}
				else
				{
					_OrderId = default(int);
				}
				SendPropertyChanged("Order");
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((PropertyChanging != null))
			{
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((PropertyChanged != null))
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderLineDetails(OrderLineDetail entity)
		{
			SendPropertyChanging();
			entity.OrderLine = this;
		}

		private void detach_OrderLineDetails(OrderLineDetail entity)
		{
			SendPropertyChanging();
			entity.OrderLine = null;
		}
	}
}
#pragma warning restore 1591
