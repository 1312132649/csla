//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
namespace DeepData
{


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
 Serializable(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.ComponentModel.ToolboxItem(true),
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),
 System.Xml.Serialization.XmlRootAttribute("DeepDataSet"),
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class DeepDataSet : System.Data.DataSet
{    
    private OrderDataTable tableOrder;
    
    private OrderLineDataTable tableOrderLine;
    
    private OrderLineDetailDataTable tableOrderLineDetail;
    
    private System.Data.DataRelation relationFK_OrderLine_Order;
    
    private System.Data.DataRelation relationFK_OrderLineDetail_OrderLine;
    
    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema();
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public void New()
	{
        base.New();
        this.BeginInit();
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = AddressOf(this.SchemaChanged);
        AddHandler(base.Tables.CollectionChanged, schemaChangedHandler);
        AddHandler(base.Relations.CollectionChanged, schemaChangedHandler);
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected Sub New(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.Serialization.StreamingContext context)
    {
		base.New(info, context, false);
        if (this.IsBinarySerialized(info, context) == true) {
            this.InitVars(false);
            System.ComponentModel.CollectionChangedEventHandler schemaChangedHandler1 = AddressOf(this.SchemaChanged);
            AddHandler(this.Tables.CollectionChanged, schemaChangedHandler1);
            AddHandler(this.Relations.CollectionChanged, schemaChangedHandler1);
            return;
        }
        String strSchema = (String)(info.GetValue("XmlSchema", GetType(String)));
        if (this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema) {
            System.Data.Dataset ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            if (ds.Tables("Order")) {
                base.Tables.Add(new OrderDataTable(ds.Tables("Order")));
            }
            if (ds.Tables("OrderLine")) {
                base.Tables.Add(new OrderLineDataTable(ds.Tables("OrderLine")));
            }
            if (ds.Tables("OrderLineDetail")) {
                base.Tables.Add(new OrderLineDetailDataTable(ds.Tables("OrderLineDetail")));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
		}
        else
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = AddressOf(this.SchemaChanged);
        AddHandler(base.Tables.CollectionChanged, schemaChangedHandler);
        AddHandler(this.Relations.CollectionChanged, schemaChangedHandler);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),
     System.ComponentModel.Browsable(false),
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public readonly OrderDataTable Order
	{
        get
		{
            return this.tableOrder;
		}
	}
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),
     System.ComponentModel.Browsable(false),
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public readonly OrderLineDataTable OrderLine
	{
        get
		{
            return this.tableOrderLine;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),
     System.ComponentModel.Browsable(false),
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public readonly OrderLineDetailDataTable OrderLineDetail
	{
        get
		{
            return this.tableOrderLineDetail;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),
     System.ComponentModel.BrowsableAttribute(true),
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerilazationMode SchemaSerializationMode
    {
		get
		{
            return this._schemaSerializationMode;
        }
        set
		{
            this._schemaSerializationMode = value;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public shadows readonly System.Data.DataTableCollection Tables
	{
        get
		{
            return base.Tables;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public shadows readonly System.Data.DataRelationCollection Relations
	{
        get
		{
            return base.Relations;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet()
	{
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override System.Data.DataSet Clone() 
	{
        DeepDataSet cln = (DeepDataSet)(base.Clone);
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables()
	{
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations()
	{
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(System.xml.xmlReader reader)
	{
        if (this.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) 
		{
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if (ds.Tables("Order")) {
                base.Tables.Add(new OrderDataTable(ds.Tables("Order")));
            }
            if (ds.Tables("OrderLine")) {
                base.Tables.Add(new OrderLineDataTable(ds.Tables("OrderLine")));
            }
            if (ds.Tables("OrderLineDetail"))  {
                base.Tables.Add(new OrderLineDetailDataTable(ds.Tables("OrderLineDetail")));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
		else
		{
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void System.Xml.Schema.XmlSchema GetSchemaSerializable() 
	{
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    friend overloads void InitVars()
	{
        this.InitVars(true);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    friend overloads void InitVars(bool initTable)
	{
        this.tableOrder = CType(base.Tables("Order"),OrderDataTable);
        if (initTable == true) {
            if (this.tableOrder) {
                this.tableOrder.InitVars();
            }
        }
        this.tableOrderLine = CType(base.Tables("OrderLine"),OrderLineDataTable);
        if (initTable == true) {
            if (this.tableOrderLine) {
                this.tableOrderLine.InitVars();
            }
        }
        this.tableOrderLineDetail = CType(base.Tables("OrderLineDetail"),OrderLineDetailDataTable);
        if (initTable == true) {
            if (this.tableOrderLineDetail) {
                this.tableOrderLineDetail.InitVars();
            }
        }
        this.relationFK_OrderLine_Order = this.Relations("FK_OrderLine_Order");
        this.relationFK_OrderLineDetail_OrderLine = this.Relations("FK_OrderLineDetail_OrderLine");
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass()
	{
        this.DataSetName = "DeepDataSet";
        this.Prefix = "";
        this.Namespace = "http://tempuri.org/DeepDataSet.xsd";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableOrder = new OrderDataTable();
        base.Tables.Add(this.tableOrder);
        this.tableOrderLine = new OrderLineDataTable();
        base.Tables.Add(this.tableOrderLine);
        this.tableOrderLineDetail = new OrderLineDetailDataTable();
        base.Tables.Add(this.tableOrderLineDetail);
        this.relationFK_OrderLine_Order = new System.Data.DataRelation("FK_OrderLine_Order", new System.Data.DataColumn() {
			this.tableOrder.IdColumn
		}, new System.Data.DataColumn() 
		{
				this.tableOrderLine.OrderIdColumn}, 
				false);
        this.Relations.Add(this.relationFK_OrderLine_Order);
        this.relationFK_OrderLineDetail_OrderLine = new System.Data.DataRelation("FK_OrderLineDetail_OrderLine", new System.Data.DataColumn() {
			this.tableOrderLine.OrderIdColumn, 
			this.tableOrderLine.IdColumn}, new System.Data.DataColumn() 
			{
				this.tableOrderLineDetail.OrderIdColumn, 
				this.tableOrderLineDetail.LineIdColumn}, false);
        this.Relations.Add(this.relationFK_OrderLineDetail_OrderLine);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeOrder()
	{
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeOrderLine()
	{
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeOrderLineDetail()
	{
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private vpid SchemaChanged(object sender, System.ComponentModel.CollectionChangedEventArgs e)
	{
        if (e.Action == System.ComponentModel.CollectionChangeAction.Remove) {
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
	{
        DeepDataSet ds = new DeepDataSet();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        xs.Add(ds.GetSchemaSerializable);
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        return type;
    }
    
    public Delegate Sub OrderRowChangeEventHandler(object sender, OrderRowChangeEvent e);
    
    public Delegate Sub OrderLineRowChangeEventHandler(object sender, OrderLineRowChangeEvent e);
    
    public Delegate Sub OrderLineDetailRowChangeEventHandler(object sender, OrderLineDetailRowChangeEvent e);
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     System.Serializable(),
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    partial public class OrderDataTable : System.Data.DataTable
	{
        Implements System.Collections.IEnumerable
        
        private System.Data.DataColumn columnId;
        
        private System.Data.DataColumn columnCustomer;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
		{
            base.New();
            this.TableName = "Order";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(System.Data.DataTable table)
		{
            base.New();
            this.TableName = table.TableName;
            if (table.CaseSensitive != table.DataSet.CaseSensitive) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if (table.Locale.ToString != table.DataSet.Locale.ToString) {
                this.Locale = table.Locale;
            }
            if (table.Namespace != table.DataSet.Namespace) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected void New(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
            base.New(info, context);
            this.InitVars();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly System.Data.DataColumn IdColumn()
		{
            get
			{
                return this.columnId;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly System.Data.DataColumn CustomerColumn() 
		{
            get
			{
                return this.columnCustomer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),
         System.ComponentModel.Browsable(false)]
        public readonly int Count() 
		{
            get
			{
                return this.Rows.Count;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public default readonly OrderRow Item(int index)
		{
            get
			{
                return (OrderRow)this.Rows(index);
            }
        }
        
        public Event OrderRowChanging As OrderRowChangeEventHandler;
        
        public Event OrderRowChanged As OrderRowChangeEventHandler;
        
        public Event OrderRowDeleting As OrderRowChangeEventHandler;
        
        public Event OrderRowDeleted As OrderRowChangeEventHandler;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads void AddOrderRow(OrderRow row)
		{
            this.Rows.Add(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads OrderRow AddOrderRow(int Id, string Customer)    
		{
		OrderRow rowOrderRow = (OrderRow)(this.newRow);
            rowOrderRow.ItemArray = new object() {Id, Customer};
            this.Rows.Add(rowOrderRow);
            return rowOrderRow;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrderRow FindById(int Id)
		{
            return (OrderRow)(this.Rows.Find(new Object() {Id}));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Overridable System.Collections.IEnumerator GetEnumerator() : System.Collections.IEnumerable.GetEnumerator
		{
            return this.Rows.GetEnumerator;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone()
		{
            OrderDataTable cln = (OrderDataTable)base.Clone;
            cln.InitVars();
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance()
		{
            return new OrderDataTable();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend void InitVars()
		{
            this.columnId = base.Columns("Id");
            this.columnCustomer = base.Columns("Customer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
		{
            this.columnId = new System.Data.DataColumn("Id", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnId);
            this.columnCustomer = new System.Data.DataColumn("Customer", GetType(String), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnCustomer)
            this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn() {this.columnId}, true))
            this.columnId.AllowDBNull = false;
            this.columnId.Unique = true;
            this.columnCustomer.AllowDBNull = false;
            this.columnCustomer.MaxLength = 50;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function NewOrderRow() As OrderRow
            return; CType(this.NewRow,OrderRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            return; New OrderRow(builder)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function GetRowType() As System.Type
            return; GetType(OrderRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanged(e)
            if (Not (this.OrderRowChangedEvent) Is null) {
                RaiseEvent OrderRowChanged(Me, new OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanging(e)
            if (Not (this.OrderRowChangingEvent) Is null) {
                RaiseEvent OrderRowChanging(Me, new OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleted(e)
            if (Not (this.OrderRowDeletedEvent) Is null) {
                RaiseEvent OrderRowDeleted(Me, new OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleting(e)
            if (Not (this.OrderRowDeletingEvent) Is null) {
                RaiseEvent OrderRowDeleting(Me, new OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub RemoveOrderRow(ByVal row As OrderRow)
            this.Rows.Remove(row)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = new System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = new System.Xml.Schema.XmlSchemaSequence
            Dim ds As DeepDataSet = new DeepDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = new Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = new Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            return; type
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    partial public Class OrderLineDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        private columnOrderId As System.Data.DataColumn
        
        private columnId As System.Data.DataColumn
        
        private columnProduct As System.Data.DataColumn
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
            base.New
            this.TableName = "OrderLine"
            this.BeginInit
            this.InitClass
            this.EndInit
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(ByVal table As System.Data.DataTable)
            base.New
            this.TableName = table.TableName
            if (table.CaseSensitive != table.DataSet.CaseSensitive) {
                this.CaseSensitive = table.CaseSensitive
            }
            if (table.Locale.ToString != table.DataSet.Locale.ToString) {
                this.Locale = table.Locale
            }
            if (table.Namespace != table.DataSet.Namespace) {
                this.Namespace = table.Namespace
            }
            this.Prefix = table.Prefix
            this.MinimumCapacity = table.MinimumCapacity
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Sub New(ByVal info As System.Runtithis.Serialization.SerializationInfo, ByVal context As System.Runtithis.Serialization.StreamingContext)
            base.New(info, context)
            this.InitVars
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property OrderIdColumn() As System.Data.DataColumn
            Get
                return; this.columnOrderId
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property IdColumn() As System.Data.DataColumn
            Get
                return; this.columnId
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property ProductColumn() As System.Data.DataColumn
            Get
                return; this.columnProduct
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)]
        public readonly property Count() As Integer
            Get
                return; this.Rows.Count
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Default readonly property Item(ByVal index As Integer) As OrderLineRow
            Get
                return; CType(this.Rows(index),OrderLineRow)
            }
        }
        
        public Event OrderLineRowChanging As OrderLineRowChangeEventHandler
        
        public Event OrderLineRowChanged As OrderLineRowChangeEventHandler
        
        public Event OrderLineRowDeleting As OrderLineRowChangeEventHandler
        
        public Event OrderLineRowDeleted As OrderLineRowChangeEventHandler
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads Sub AddOrderLineRow(ByVal row As OrderLineRow)
            this.Rows.Add(row)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads Function AddOrderLineRow(ByVal parentOrderRowByFK_OrderLine_Order As OrderRow, ByVal Id As Integer, ByVal Product As String) As OrderLineRow
            Dim rowOrderLineRow As OrderLineRow = CType(this.NewRow,OrderLineRow)
            rowOrderLineRow.ItemArray = new Object() {parentOrderRowByFK_OrderLine_Order(0), Id, Product}
            this.Rows.Add(rowOrderLineRow)
            return; rowOrderLineRow
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function FindByOrderIdId(ByVal OrderId As Integer, ByVal Id As Integer) As OrderLineRow
            return; CType(this.Rows.Find(new Object() {OrderId, Id}),OrderLineRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            return; this.Rows.GetEnumerator
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override Function Clone() As System.Data.DataTable
            Dim cln As OrderLineDataTable = CType(base.Clone,OrderLineDataTable)
            cln.InitVars
            return; cln
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function CreateInstance() As System.Data.DataTable
            return; new OrderLineDataTable
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend InitVars()
            this.columnOrderId = base.Columns("OrderId")
            this.columnId = base.Columns("Id")
            this.columnProduct = base.Columns("Product")
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitClass()
            this.columnOrderId = new System.Data.DataColumn("OrderId", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnOrderId)
            this.columnId = new System.Data.DataColumn("Id", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnId)
            this.columnProduct = new System.Data.DataColumn("Product", GetType(String), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnProduct)
            this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn() {this.columnOrderId, this.columnId}, true))
            this.columnOrderId.AllowDBNull = false
            this.columnId.AllowDBNull = false
            this.columnProduct.AllowDBNull = false
            this.columnProduct.MaxLength = 50
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function NewOrderLineRow() As OrderLineRow
            return; CType(this.NewRow,OrderLineRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            return; new OrderLineRow(builder)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function GetRowType() As System.Type
            return; GetType(OrderLineRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanged(e)
            if (Not (this.OrderLineRowChangedEvent) Is null) {
                RaiseEvent OrderLineRowChanged(Me, new OrderLineRowChangeEvent(CType(e.Row,OrderLineRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanging(e)
            if (Not (this.OrderLineRowChangingEvent) Is null) {
                RaiseEvent OrderLineRowChanging(Me, new OrderLineRowChangeEvent(CType(e.Row,OrderLineRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleted(e)
            if (Not (this.OrderLineRowDeletedEvent) Is null) {
                RaiseEvent OrderLineRowDeleted(Me, new OrderLineRowChangeEvent(CType(e.Row,OrderLineRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleting(e)
            if (Not (this.OrderLineRowDeletingEvent) Is null) {
                RaiseEvent OrderLineRowDeleting(Me, new OrderLineRowChangeEvent(CType(e.Row,OrderLineRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub RemoveOrderLineRow(ByVal row As OrderLineRow)
            this.Rows.Remove(row)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = new System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = new System.Xml.Schema.XmlSchemaSequence
            Dim ds As DeepDataSet = new DeepDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = new Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = new Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderLineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            return; type
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    partial public Class OrderLineDetailDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        private columnOrderId As System.Data.DataColumn
        
        private columnLineId As System.Data.DataColumn
        
        private columnId As System.Data.DataColumn
        
        private columnDetail As System.Data.DataColumn
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
            base.New
            this.TableName = "OrderLineDetail"
            this.BeginInit
            this.InitClass
            this.EndInit
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(ByVal table As System.Data.DataTable)
            base.New
            this.TableName = table.TableName
            if (table.CaseSensitive != table.DataSet.CaseSensitive) {
                this.CaseSensitive = table.CaseSensitive
            }
            if (table.Locale.ToString != table.DataSet.Locale.ToString) {
                this.Locale = table.Locale
            }
            if (table.Namespace != table.DataSet.Namespace) {
                this.Namespace = table.Namespace
            }
            this.Prefix = table.Prefix
            this.MinimumCapacity = table.MinimumCapacity
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Sub New(ByVal info As System.Runtithis.Serialization.SerializationInfo, ByVal context As System.Runtithis.Serialization.StreamingContext)
            base.New(info, context)
            this.InitVars
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property OrderIdColumn() As System.Data.DataColumn
            Get
                return; this.columnOrderId
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property LineIdColumn() As System.Data.DataColumn
            Get
                return; this.columnLineId
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property IdColumn() As System.Data.DataColumn
            Get
                return; this.columnId
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property DetailColumn() As System.Data.DataColumn
            Get
                return; this.columnDetail
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)]
        public readonly property Count() As Integer
            Get
                return; this.Rows.Count
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Default readonly property Item(ByVal index As Integer) As OrderLineDetailRow
            Get
                return; CType(this.Rows(index),OrderLineDetailRow)
            }
        }
        
        public Event OrderLineDetailRowChanging As OrderLineDetailRowChangeEventHandler
        
        public Event OrderLineDetailRowChanged As OrderLineDetailRowChangeEventHandler
        
        public Event OrderLineDetailRowDeleting As OrderLineDetailRowChangeEventHandler
        
        public Event OrderLineDetailRowDeleted As OrderLineDetailRowChangeEventHandler
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads Sub AddOrderLineDetailRow(ByVal row As OrderLineDetailRow)
            this.Rows.Add(row)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public overloads Function AddOrderLineDetailRow(ByVal OrderId As Integer, ByVal LineId As Integer, ByVal Id As Integer, ByVal Detail As String) As OrderLineDetailRow
            Dim rowOrderLineDetailRow As OrderLineDetailRow = CType(this.NewRow,OrderLineDetailRow)
            rowOrderLineDetailRow.ItemArray = New Object() {OrderId, LineId, Id, Detail}
            this.Rows.Add(rowOrderLineDetailRow)
            return; rowOrderLineDetailRow
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function FindByOrderIdLineIdId(ByVal OrderId As Integer, ByVal LineId As Integer, ByVal Id As Integer) As OrderLineDetailRow
            return; CType(this.Rows.Find(new Object() {OrderId, LineId, Id}),OrderLineDetailRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            return; this.Rows.GetEnumerator
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override Function Clone() As System.Data.DataTable
            Dim cln As OrderLineDetailDataTable = CType(base.Clone,OrderLineDetailDataTable)
            cln.InitVars
            return; cln
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function CreateInstance() As System.Data.DataTable
            return; new OrderLineDetailDataTable
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend InitVars()
            this.columnOrderId = base.Columns("OrderId")
            this.columnLineId = base.Columns("LineId")
            this.columnId = base.Columns("Id")
            this.columnDetail = base.Columns("Detail")
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitClass()
            this.columnOrderId = new System.Data.DataColumn("OrderId", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnOrderId)
            this.columnLineId = new System.Data.DataColumn("LineId", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnLineId)
            this.columnId = new System.Data.DataColumn("Id", GetType(Integer), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnId)
            this.columnDetail = new System.Data.DataColumn("Detail", GetType(String), null, System.Data.MappingType.Element)
            base.Columns.Add(this.columnDetail)
            this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn() {this.columnOrderId, this.columnLineId, this.columnId}, true))
            this.columnOrderId.AllowDBNull = false
            this.columnLineId.AllowDBNull = false
            this.columnId.AllowDBNull = false
            this.columnDetail.AllowDBNull = false
            this.columnDetail.MaxLength = 50
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function NewOrderLineDetailRow() As OrderLineDetailRow
            return; CType(this.NewRow,OrderLineDetailRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            return; new OrderLineDetailRow(builder)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Function GetRowType() As System.Type
            return; GetType(OrderLineDetailRow)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanged(e)
            if (Not (this.OrderLineDetailRowChangedEvent) Is null) {
                RaiseEvent OrderLineDetailRowChanged(Me, new OrderLineDetailRowChangeEvent(CType(e.Row,OrderLineDetailRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowChanging(e)
            if (Not (this.OrderLineDetailRowChangingEvent) Is null) {
                RaiseEvent OrderLineDetailRowChanging(Me, new OrderLineDetailRowChangeEvent(CType(e.Row,OrderLineDetailRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleted(e)
            if (Not (this.OrderLineDetailRowDeletedEvent) Is null) {
                RaiseEvent OrderLineDetailRowDeleted(Me, new OrderLineDetailRowChangeEvent(CType(e.Row,OrderLineDetailRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            base.OnRowDeleting(e)
            if (Not (this.OrderLineDetailRowDeletingEvent) Is null) {
                RaiseEvent OrderLineDetailRowDeleting(Me, new OrderLineDetailRowChangeEvent(CType(e.Row,OrderLineDetailRow), e.Action))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub RemoveOrderLineDetailRow(ByVal row As OrderLineDetailRow)
            this.Rows.Remove(row)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = new System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = new System.Xml.Schema.XmlSchemaSequence
            Dim ds As DeepDataSet = new DeepDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = new Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = new System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = new Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = new System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderLineDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            return; type
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    partial public Class OrderRow
        Inherits System.Data.DataRow
        
        private tableOrder As OrderDataTable
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(ByVal rb As System.Data.DataRowBuilder)
            base.New(rb)
            this.tableOrder = CType(this.Table,OrderDataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Id() As Integer
            Get
                return; CType(Me(this.tableOrder.IdColumn),Integer)
            }
            Set
                Me(this.tableOrder.IdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Customer() As String
            Get
                return; CType(Me(this.tableOrder.CustomerColumn),String)
            }
            Set
                Me(this.tableOrder.CustomerColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function GetOrderLineRows() As OrderLineRow()
            return; CType(base.GetChildRows(this.Table.ChildRelations("FK_OrderLine_Order")),OrderLineRow())
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    partial public Class OrderLineRow
        Inherits System.Data.DataRow
        
        private tableOrderLine As OrderLineDataTable
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(ByVal rb As System.Data.DataRowBuilder)
            base.New(rb)
            this.tableOrderLine = CType(this.Table,OrderLineDataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property OrderId() As Integer
            Get
                return; CType(Me(this.tableOrderLine.OrderIdColumn),Integer)
            }
            Set
                Me(this.tableOrderLine.OrderIdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Id() As Integer
            Get
                return; CType(Me(this.tableOrderLine.IdColumn),Integer)
            }
            Set
                Me(this.tableOrderLine.IdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Product() As String
            Get
                return; CType(Me(this.tableOrderLine.ProductColumn),String)
            }
            Set
                Me(this.tableOrderLine.ProductColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property OrderRow() As OrderRow
            Get
                return; CType(this.GetParentRow(this.Table.ParentRelations("FK_OrderLine_Order")),OrderRow)
            }
            Set
                this.SetParentRow(value, this.Table.ParentRelations("FK_OrderLine_Order"))
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Function GetOrderLineDetailRows() As OrderLineDetailRow()
            return; CType(base.GetChildRows(this.Table.ChildRelations("FK_OrderLineDetail_OrderLine")),OrderLineDetailRow())
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    partial public Class OrderLineDetailRow
        Inherits System.Data.DataRow
        
        private tableOrderLineDetail As OrderLineDetailDataTable
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend New(ByVal rb As System.Data.DataRowBuilder)
            base.New(rb)
            this.tableOrderLineDetail = CType(this.Table,OrderLineDetailDataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property OrderId() As Integer
            Get
                return; CType(Me(this.tableOrderLineDetail.OrderIdColumn),Integer)
            }
            Set
                Me(this.tableOrderLineDetail.OrderIdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property LineId() As Integer
            Get
                return; CType(Me(this.tableOrderLineDetail.LineIdColumn),Integer)
            }
            Set
                Me(this.tableOrderLineDetail.LineIdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Id() As Integer
            Get
                return; CType(Me(this.tableOrderLineDetail.IdColumn),Integer)
            }
            Set
                Me(this.tableOrderLineDetail.IdColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property Detail() As String
            Get
                return; CType(Me(this.tableOrderLineDetail.DetailColumn),String)
            }
            Set
                Me(this.tableOrderLineDetail.DetailColumn) = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property OrderLineRowParent() As OrderLineRow
            Get
                return; CType(this.GetParentRow(this.Table.ParentRelations("FK_OrderLineDetail_OrderLine")),OrderLineRow)
            }
            Set
                this.SetParentRow(value, this.Table.ParentRelations("FK_OrderLineDetail_OrderLine"))
            }
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public Class OrderRowChangeEvent
        Inherits System.EventArgs
        
        private eventRow As OrderRow
        
        private eventAction As System.Data.DataRowAction
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New(ByVal row As OrderRow, ByVal action As System.Data.DataRowAction)
            base.New
            this.eventRow = row
            this.eventAction = action
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Row() As OrderRow
            Get
                return; this.eventRow
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Action() As System.Data.DataRowAction
            Get
                return; this.eventAction
            }
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public Class OrderLineRowChangeEvent
        Inherits System.EventArgs
        
        private eventRow As OrderLineRow
        
        private eventAction As System.Data.DataRowAction
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New(ByVal row As OrderLineRow, ByVal action As System.Data.DataRowAction)
            base.New
            this.eventRow = row
            this.eventAction = action
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Row() As OrderLineRow
            Get
                return; this.eventRow
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Action() As System.Data.DataRowAction
            Get
                return; this.eventAction
            }
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public Class OrderLineDetailRowChangeEvent
        Inherits System.EventArgs
        
        private eventRow As OrderLineDetailRow
        
        private eventAction As System.Data.DataRowAction
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New(ByVal row As OrderLineDetailRow, ByVal action As System.Data.DataRowAction)
            base.New
            this.eventRow = row
            this.eventAction = action
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Row() As OrderLineDetailRow
            Get
                return; this.eventRow
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readonly property Action() As System.Data.DataRowAction
            Get
                return; this.eventAction
            }
        }
    End Class
End Class

Namespace DeepDataSetTableAdapters
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, publicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    partial public Class OrderTableAdapter
        Inherits System.ComponentModel.Component
        
        private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        private _connection As System.Data.SqlClient.SqlConnection
        
        private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        private _clearBeforeFill As Boolean
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
            base.New
            this.ClearBeforeFill = true
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private readonly property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                if (this._adapter Is null) {
                    this.InitAdapter
                }
                return; this._adapter
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend Connection() As System.Data.SqlClient.SqlConnection
            Get
                if (this._connection Is null) {
                    this.InitConnection
                }
                return; this._connection
            }
            Set
                this._connection = value
                if (Not (this.Adapter.InsertCommand) Is null) {
                    this.Adapter.InsertCommand.Connection = value
                }
                if (Not (this.Adapter.DeleteCommand) Is null) {
                    this.Adapter.DeleteCommand.Connection = value
                }
                if (Not (this.Adapter.UpdateCommand) Is null) {
                    this.Adapter.UpdateCommand.Connection = value
                }
                Dim i As Integer = 0
                Do While (i < this.CommandCollection.Length)
                    if (Not (this.CommandCollection(i)) Is null) {
                        CType(this.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    }
                    i = (i + 1)
                Loop
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected readonly property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                if (this._commandCollection Is null) {
                    this.InitCommandCollection
                }
                return; this._commandCollection
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property ClearBeforeFill() As Boolean
            Get
                return; this._clearBeforeFill
            }
            Set
                this._clearBeforeFill = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitAdapter()
            this._adapter = new System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = new System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Order"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Customer", "Customer")
            this._adapter.TableMappings.Add(tableMapping)
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.DeleteCommand.Connection = this.Connection
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Order] WHERE (([Id] = @Original_Id) AND ([Customer] = @Origina"& _ 
                "l_Customer))"
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Customer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Customer", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.InsertCommand.Connection = this.Connection
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Order] ([Id], [Customer]) VALUES (@Id, @Customer);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Id,"& _ 
                " Customer FROM [Order] WHERE (Id = @Id)"
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Customer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Customer", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.UpdateCommand.Connection = this.Connection
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Order] SET [Id] = @Id, [Customer] = @Customer WHERE (([Id] = @Origi"& _ 
                "nal_Id) AND ([Customer] = @Original_Customer));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Id, Customer FROM [Order"& _ 
                "] WHERE (Id = @Id)"
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Customer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Customer", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Customer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Customer", System.Data.DataRowVersion.Original, false, null, "", "", ""))
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitConnection()
            this._connection = new System.Data.SqlClient.SqlConnection
            this._connection.ConnectionString = Global.DeepData.My.MySettings.Default.DeepDataStoreConnectionString
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitCommandCollection()
            this._commandCollection = new System.Data.SqlClient.SqlCommand(0) {}
            this._commandCollection(0) = new System.Data.SqlClient.SqlCommand
            this._commandCollection(0).Connection = this.Connection
            this._commandCollection(0).CommandText = "SELECT Id, Customer FROM dbo.[Order]"
            this._commandCollection(0).CommandType = System.Data.CommandType.Text
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public overloads Overridable Function Fill(ByVal dataTable As DeepDataSet.OrderDataTable) As Integer
            this.Adapter.SelectCommand = this.CommandCollection(0)
            if (this.ClearBeforeFill = true) {
                dataTable.Clear
            }
            Dim return;Value As Integer = this.Adapter.Fill(dataTable)
            return; return;Value
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)]
        public overloads Overridable Function GetData() As DeepDataSet.OrderDataTable
            this.Adapter.SelectCommand = this.CommandCollection(0)
            Dim dataTable As DeepDataSet.OrderDataTable = new DeepDataSet.OrderDataTable
            this.Adapter.Fill(dataTable)
            return; dataTable
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataTable As DeepDataSet.OrderDataTable) As Integer
            return; this.Adapter.Update(dataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataSet As DeepDataSet) As Integer
            return; this.Adapter.Update(dataSet, "Order")
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            return; this.Adapter.Update(new System.Data.DataRow() {dataRow})
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            return; this.Adapter.Update(dataRows)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public overloads Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_Customer As String) As Integer
            this.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Id,Integer)
            if (Original_Customer Is null) {
                Throw new System.ArgumentNullException("Original_Customer")
            Else
                this.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Customer,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.DeleteCommand.Connection.State
            if ((this.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.DeleteCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.DeleteCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.DeleteCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public overloads Overridable Function Insert(ByVal Id As Integer, ByVal Customer As String) As Integer
            this.Adapter.InsertCommand.Parameters(0).Value = CType(Id,Integer)
            if (Customer Is null) {
                Throw new System.ArgumentNullException("Customer")
            Else
                this.Adapter.InsertCommand.Parameters(1).Value = CType(Customer,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.InsertCommand.Connection.State
            if ((this.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.InsertCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.InsertCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.InsertCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public overloads Overridable Function Update(ByVal Id As Integer, ByVal Customer As String, ByVal Original_Id As Integer, ByVal Original_Customer As String) As Integer
            this.Adapter.UpdateCommand.Parameters(0).Value = CType(Id,Integer)
            if (Customer Is null) {
                Throw new System.ArgumentNullException("Customer")
            Else
                this.Adapter.UpdateCommand.Parameters(1).Value = CType(Customer,String)
            }
            this.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_Id,Integer)
            if (Original_Customer Is null) {
                Throw new System.ArgumentNullException("Original_Customer")
            Else
                this.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Customer,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.UpdateCommand.Connection.State
            if ((this.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.UpdateCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.UpdateCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.UpdateCommand.Connection.Close
                }
            End Try
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, publicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    partial public Class OrderLineTableAdapter
        Inherits System.ComponentModel.Component
        
        private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        private _connection As System.Data.SqlClient.SqlConnection
        
        private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        private _clearBeforeFill As Boolean
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
            base.New
            this.ClearBeforeFill = true
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private readonly property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                if (this._adapter Is null) {
                    this.InitAdapter
                }
                return; this._adapter
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend Connection() As System.Data.SqlClient.SqlConnection
            Get
                if (this._connection Is null) {
                    this.InitConnection
                }
                return; this._connection
            }
            Set
                this._connection = value
                if (Not (this.Adapter.InsertCommand) Is null) {
                    this.Adapter.InsertCommand.Connection = value
                }
                if (Not (this.Adapter.DeleteCommand) Is null) {
                    this.Adapter.DeleteCommand.Connection = value
                }
                if (Not (this.Adapter.UpdateCommand) Is null) {
                    this.Adapter.UpdateCommand.Connection = value
                }
                Dim i As Integer = 0
                Do While (i < this.CommandCollection.Length)
                    if (Not (this.CommandCollection(i)) Is null) {
                        CType(this.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    }
                    i = (i + 1)
                Loop
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected readonly property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                if (this._commandCollection Is null) {
                    this.InitCommandCollection
                }
                return; this._commandCollection
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property ClearBeforeFill() As Boolean
            Get
                return; this._clearBeforeFill
            }
            Set
                this._clearBeforeFill = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitAdapter()
            this._adapter = new System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = new System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderLine"
            tableMapping.ColumnMappings.Add("OrderId", "OrderId")
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Product", "Product")
            this._adapter.TableMappings.Add(tableMapping)
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.DeleteCommand.Connection = this.Connection
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OrderLine] WHERE (([OrderId] = @Original_OrderId) AND ([Id] = "& _ 
                "@Original_Id) AND ([Product] = @Original_Product))"
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Product", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Product", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.InsertCommand.Connection = this.Connection
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OrderLine] ([OrderId], [Id], [Product]) VALUES (@OrderId, @Id,"& _ 
                " @Product);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OrderId, Id, Product FROM OrderLine WHERE (Id = @Id) AND (Or"& _ 
                "derId = @OrderId)"
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Product", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Product", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.UpdateCommand.Connection = this.Connection
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OrderLine] SET [OrderId] = @OrderId, [Id] = @Id, [Product] = @Produ"& _ 
                "ct WHERE (([OrderId] = @Original_OrderId) AND ([Id] = @Original_Id) AND ([Produc"& _ 
                "t] = @Original_Product));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OrderId, Id, Product FROM OrderLine WHERE (Id "& _ 
                "= @Id) AND (OrderId = @OrderId)"
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Product", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Product", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Product", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Product", System.Data.DataRowVersion.Original, false, null, "", "", ""))
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitConnection()
            this._connection = new System.Data.SqlClient.SqlConnection
            this._connection.ConnectionString = Global.DeepData.My.MySettings.Default.DeepDataStoreConnectionString
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitCommandCollection()
            this._commandCollection = new System.Data.SqlClient.SqlCommand(0) {}
            this._commandCollection(0) = new System.Data.SqlClient.SqlCommand
            this._commandCollection(0).Connection = this.Connection
            this._commandCollection(0).CommandText = "SELECT OrderId, Id, Product FROM dbo.OrderLine"
            this._commandCollection(0).CommandType = System.Data.CommandType.Text
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public overloads Overridable Function Fill(ByVal dataTable As DeepDataSet.OrderLineDataTable) As Integer
            this.Adapter.SelectCommand = this.CommandCollection(0)
            if (this.ClearBeforeFill = true) {
                dataTable.Clear
            }
            Dim return;Value As Integer = this.Adapter.Fill(dataTable)
            return; return;Value
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)]
        public overloads Overridable Function GetData() As DeepDataSet.OrderLineDataTable
            this.Adapter.SelectCommand = this.CommandCollection(0)
            Dim dataTable As DeepDataSet.OrderLineDataTable = new DeepDataSet.OrderLineDataTable
            this.Adapter.Fill(dataTable)
            return; dataTable
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataTable As DeepDataSet.OrderLineDataTable) As Integer
            return; this.Adapter.Update(dataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataSet As DeepDataSet) As Integer
            return; this.Adapter.Update(dataSet, "OrderLine")
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            return; this.Adapter.Update(new System.Data.DataRow() {dataRow})
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            return; this.Adapter.Update(dataRows)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public overloads Overridable Function Delete(ByVal Original_OrderId As Integer, ByVal Original_Id As Integer, ByVal Original_Product As String) As Integer
            this.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_OrderId,Integer)
            this.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Id,Integer)
            if (Original_Product Is null) {
                Throw new System.ArgumentNullException("Original_Product")
            Else
                this.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Product,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.DeleteCommand.Connection.State
            if ((this.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.DeleteCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.DeleteCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.DeleteCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public overloads Overridable Function Insert(ByVal OrderId As Integer, ByVal Id As Integer, ByVal Product As String) As Integer
            this.Adapter.InsertCommand.Parameters(0).Value = CType(OrderId,Integer)
            this.Adapter.InsertCommand.Parameters(1).Value = CType(Id,Integer)
            if (Product Is null) {
                Throw new System.ArgumentNullException("Product")
            Else
                this.Adapter.InsertCommand.Parameters(2).Value = CType(Product,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.InsertCommand.Connection.State
            if ((this.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.InsertCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.InsertCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.InsertCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public overloads Overridable Function Update(ByVal OrderId As Integer, ByVal Id As Integer, ByVal Product As String, ByVal Original_OrderId As Integer, ByVal Original_Id As Integer, ByVal Original_Product As String) As Integer
            this.Adapter.UpdateCommand.Parameters(0).Value = CType(OrderId,Integer)
            this.Adapter.UpdateCommand.Parameters(1).Value = CType(Id,Integer)
            if (Product Is null) {
                Throw new System.ArgumentNullException("Product")
            Else
                this.Adapter.UpdateCommand.Parameters(2).Value = CType(Product,String)
            }
            this.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_OrderId,Integer)
            this.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Id,Integer)
            if (Original_Product Is null) {
                Throw new System.ArgumentNullException("Original_Product")
            Else
                this.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Product,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.UpdateCommand.Connection.State
            if ((this.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.UpdateCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.UpdateCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.UpdateCommand.Connection.Close
                }
            End Try
        }
    End Class
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, publicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    partial public Class OrderLineDetailTableAdapter
        Inherits System.ComponentModel.Component
        
        private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        private _connection As System.Data.SqlClient.SqlConnection
        
        private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        private _clearBeforeFill As Boolean
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sub New()
            base.New
            this.ClearBeforeFill = true
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private readonly property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                if (this._adapter Is null) {
                    this.InitAdapter
                }
                return; this._adapter
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        friend Connection() As System.Data.SqlClient.SqlConnection
            Get
                if (this._connection Is null) {
                    this.InitConnection
                }
                return; this._connection
            }
            Set
                this._connection = value
                if (Not (this.Adapter.InsertCommand) Is null) {
                    this.Adapter.InsertCommand.Connection = value
                }
                if (Not (this.Adapter.DeleteCommand) Is null) {
                    this.Adapter.DeleteCommand.Connection = value
                }
                if (Not (this.Adapter.UpdateCommand) Is null) {
                    this.Adapter.UpdateCommand.Connection = value
                }
                Dim i As Integer = 0
                Do While (i < this.CommandCollection.Length)
                    if (Not (this.CommandCollection(i)) Is null) {
                        CType(this.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    }
                    i = (i + 1)
                Loop
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected readonly property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                if (this._commandCollection Is null) {
                    this.InitCommandCollection
                }
                return; this._commandCollection
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public property ClearBeforeFill() As Boolean
            Get
                return; this._clearBeforeFill
            }
            Set
                this._clearBeforeFill = value
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitAdapter()
            this._adapter = new System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = new System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderLineDetail"
            tableMapping.ColumnMappings.Add("OrderId", "OrderId")
            tableMapping.ColumnMappings.Add("LineId", "LineId")
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Detail", "Detail")
            this._adapter.TableMappings.Add(tableMapping)
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.DeleteCommand.Connection = this.Connection
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OrderLineDetail] WHERE (([OrderId] = @Original_OrderId) AND (["& _ 
                "LineId] = @Original_LineId) AND ([Id] = @Original_Id) AND ([Detail] = @Original_"& _ 
                "Detail))"
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Detail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Detail", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.InsertCommand.Connection = this.Connection
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OrderLineDetail] ([OrderId], [LineId], [Id], [Detail]) VALUES "& _ 
                "(@OrderId, @LineId, @Id, @Detail);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OrderId, LineId, Id, Detail FROM Orde"& _ 
                "rLineDetail WHERE (Id = @Id) AND (LineId = @LineId) AND (OrderId = @OrderId)"
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Detail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Detail", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand
            this._adapter.UpdateCommand.Connection = this.Connection
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OrderLineDetail] SET [OrderId] = @OrderId, [LineId] = @LineId, [Id]"& _ 
                " = @Id, [Detail] = @Detail WHERE (([OrderId] = @Original_OrderId) AND ([LineId] "& _ 
                "= @Original_LineId) AND ([Id] = @Original_Id) AND ([Detail] = @Original_Detail))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OrderId, LineId, Id, Detail FROM OrderLineDetail WHERE (Id = @Id) AND "& _ 
                "(LineId = @LineId) AND (OrderId = @OrderId)"
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineId", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Detail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Detail", System.Data.DataRowVersion.Current, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LineId", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""))
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Detail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Detail", System.Data.DataRowVersion.Original, false, null, "", "", ""))
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitConnection()
            this._connection = new System.Data.SqlClient.SqlConnection
            this._connection.ConnectionString = Global.DeepData.My.MySettings.Default.DeepDataStoreConnectionString
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Sub InitCommandCollection()
            this._commandCollection = new System.Data.SqlClient.SqlCommand(0) {}
            this._commandCollection(0) = new System.Data.SqlClient.SqlCommand
            this._commandCollection(0).Connection = this.Connection
            this._commandCollection(0).CommandText = "SELECT OrderId, LineId, Id, Detail FROM dbo.OrderLineDetail"
            this._commandCollection(0).CommandType = System.Data.CommandType.Text
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public overloads Overridable Function Fill(ByVal dataTable As DeepDataSet.OrderLineDetailDataTable) As Integer
            this.Adapter.SelectCommand = this.CommandCollection(0)
            if (this.ClearBeforeFill = true) {
                dataTable.Clear
            }
            Dim return;Value As Integer = this.Adapter.Fill(dataTable)
            return; return;Value
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)]
        public overloads Overridable Function GetData() As DeepDataSet.OrderLineDetailDataTable
            this.Adapter.SelectCommand = this.CommandCollection(0)
            Dim dataTable As DeepDataSet.OrderLineDetailDataTable = new DeepDataSet.OrderLineDetailDataTable
            this.Adapter.Fill(dataTable)
            return; dataTable
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataTable As DeepDataSet.OrderLineDetailDataTable) As Integer
            return; this.Adapter.Update(dataTable)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataSet As DeepDataSet) As Integer
            return; this.Adapter.Update(dataSet, "OrderLineDetail")
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            return; this.Adapter.Update(new System.Data.DataRow() {dataRow})
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            return; this.Adapter.Update(dataRows)
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public overloads Overridable Function Delete(ByVal Original_OrderId As Integer, ByVal Original_LineId As Integer, ByVal Original_Id As Integer, ByVal Original_Detail As String) As Integer
            this.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_OrderId,Integer)
            this.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LineId,Integer)
            this.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Id,Integer)
            if (Original_Detail Is null) {
                Throw new System.ArgumentNullException("Original_Detail")
            Else
                this.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Detail,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.DeleteCommand.Connection.State
            if ((this.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.DeleteCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.DeleteCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.DeleteCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public overloads Overridable Function Insert(ByVal OrderId As Integer, ByVal LineId As Integer, ByVal Id As Integer, ByVal Detail As String) As Integer
            this.Adapter.InsertCommand.Parameters(0).Value = CType(OrderId,Integer)
            this.Adapter.InsertCommand.Parameters(1).Value = CType(LineId,Integer)
            this.Adapter.InsertCommand.Parameters(2).Value = CType(Id,Integer)
            if (Detail Is null) {
                Throw new System.ArgumentNullException("Detail")
            Else
                this.Adapter.InsertCommand.Parameters(3).Value = CType(Detail,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.InsertCommand.Connection.State
            if ((this.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.InsertCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.InsertCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.InsertCommand.Connection.Close
                }
            End Try
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public overloads Overridable Function Update(ByVal OrderId As Integer, ByVal LineId As Integer, ByVal Id As Integer, ByVal Detail As String, ByVal Original_OrderId As Integer, ByVal Original_LineId As Integer, ByVal Original_Id As Integer, ByVal Original_Detail As String) As Integer
            this.Adapter.UpdateCommand.Parameters(0).Value = CType(OrderId,Integer)
            this.Adapter.UpdateCommand.Parameters(1).Value = CType(LineId,Integer)
            this.Adapter.UpdateCommand.Parameters(2).Value = CType(Id,Integer)
            if (Detail Is null) {
                Throw new System.ArgumentNullException("Detail")
            Else
                this.Adapter.UpdateCommand.Parameters(3).Value = CType(Detail,String)
            }
            this.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_OrderId,Integer)
            this.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_LineId,Integer)
            this.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Id,Integer)
            if (Original_Detail Is null) {
                Throw new System.ArgumentNullException("Original_Detail")
            Else
                this.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Detail,String)
            }
            Dim previousConnectionState As System.Data.ConnectionState = this.Adapter.UpdateCommand.Connection.State
            if ((this.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        != System.Data.ConnectionState.Open) {
                this.Adapter.UpdateCommand.Connection.Open
            }
            Try 
                Dim return;Value As Integer = this.Adapter.UpdateCommand.ExecuteNonQuery
                return; return;Value
            Finally
                if (previousConnectionState = System.Data.ConnectionState.Closed) {
                    this.Adapter.UpdateCommand.Connection.Close
                }
            End Try
        }
    End Class
}
