//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


//INSTANT C# NOTE: Formerly VB.NET project-level imports:
using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Xml;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;

using System.Runtime.Serialization;

namespace WcfService.Business.Client
{
	namespace CompanyServiceReference
	{

		[System.Diagnostics.DebuggerStepThroughAttribute(), System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/Web")]
		public partial class UserInfo : object, System.ComponentModel.INotifyPropertyChanged
		{

			private bool IsAuthenticatedField;

			private string RoleField;

			private string UserNameField;

			[System.Runtime.Serialization.DataMemberAttribute()]
			public bool IsAuthenticated
			{
				get
				{
					return this.IsAuthenticatedField;
				}
				set
				{
					if (this.IsAuthenticatedField.Equals(value) != true)
					{
						this.IsAuthenticatedField = value;
						this.RaisePropertyChanged("IsAuthenticated");
					}
				}
			}

			[System.Runtime.Serialization.DataMemberAttribute()]
			public string Role
			{
				get
				{
					return this.RoleField;
				}
				set
				{
					if (object.ReferenceEquals(this.RoleField, value) != true)
					{
						this.RoleField = value;
						this.RaisePropertyChanged("Role");
					}
				}
			}

			[System.Runtime.Serialization.DataMemberAttribute()]
			public string UserName
			{
				get
				{
					return this.UserNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserNameField, value) != true)
					{
						this.UserNameField = value;
						this.RaisePropertyChanged("UserName");
					}
				}
			}

			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}

		[System.Diagnostics.DebuggerStepThroughAttribute(), System.Runtime.Serialization.DataContractAttribute(Name="CompanyInfo", Namespace="http://schemas.datacontract.org/2004/07/Web")]
		public partial class CompanyInfo : object, System.ComponentModel.INotifyPropertyChanged
		{

			private int CompanyIdField;

			private string CompanyNameField;

			private string DateAddedField;

			[System.Runtime.Serialization.DataMemberAttribute()]
			public int CompanyId
			{
				get
				{
					return this.CompanyIdField;
				}
				set
				{
					if (this.CompanyIdField.Equals(value) != true)
					{
						this.CompanyIdField = value;
						this.RaisePropertyChanged("CompanyId");
					}
				}
			}

			[System.Runtime.Serialization.DataMemberAttribute()]
			public string CompanyName
			{
				get
				{
					return this.CompanyNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.CompanyNameField, value) != true)
					{
						this.CompanyNameField = value;
						this.RaisePropertyChanged("CompanyName");
					}
				}
			}

			[System.Runtime.Serialization.DataMemberAttribute()]
			public string DateAdded
			{
				get
				{
					return this.DateAddedField;
				}
				set
				{
					if (object.ReferenceEquals(this.DateAddedField, value) != true)
					{
						this.DateAddedField = value;
						this.RaisePropertyChanged("DateAdded");
					}
				}
			}

			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}

		[System.ServiceModel.ServiceContractAttribute()]
		public interface ICompanyService
		{

			[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompanyService/GetUser", ReplyAction="http://tempuri.org/ICompanyService/GetUserResponse")]
			System.IAsyncResult BeginGetUser(string userName, string password, System.AsyncCallback callback, object asyncState);

			CompanyServiceReference.UserInfo EndGetUser(System.IAsyncResult result);

			[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompanyService/GetCompany", ReplyAction="http://tempuri.org/ICompanyService/GetCompanyResponse")]
			System.IAsyncResult BeginGetCompany(int companyId, System.AsyncCallback callback, object asyncState);

			CompanyServiceReference.CompanyInfo EndGetCompany(System.IAsyncResult result);

			[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompanyService/UpdateCompany", ReplyAction="http://tempuri.org/ICompanyService/UpdateCompanyResponse")]
			System.IAsyncResult BeginUpdateCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState);

			void EndUpdateCompany(System.IAsyncResult result);

			[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompanyService/InsertCompany", ReplyAction="http://tempuri.org/ICompanyService/InsertCompanyResponse")]
			System.IAsyncResult BeginInsertCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState);

			int EndInsertCompany(System.IAsyncResult result);

			[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompanyService/DeleteCompany", ReplyAction="http://tempuri.org/ICompanyService/DeleteCompanyResponse")]
			System.IAsyncResult BeginDeleteCompany(int companyId, System.AsyncCallback callback, object asyncState);

			void EndDeleteCompany(System.IAsyncResult result);
		}

		public interface ICompanyServiceChannel : CompanyServiceReference.ICompanyService, System.ServiceModel.IClientChannel
		{
		}

		[System.Diagnostics.DebuggerStepThroughAttribute()]
		public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{

			private object[] results;

			public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			public CompanyServiceReference.UserInfo Result
			{
				get
				{
					base.RaiseExceptionIfNecessary();
					return (CompanyServiceReference.UserInfo)(this.results[0]);
				}
			}
		}

		[System.Diagnostics.DebuggerStepThroughAttribute()]
		public partial class GetCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{

			private object[] results;

			public GetCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			public CompanyServiceReference.CompanyInfo Result
			{
				get
				{
					base.RaiseExceptionIfNecessary();
					return (CompanyServiceReference.CompanyInfo)(this.results[0]);
				}
			}
		}

		[System.Diagnostics.DebuggerStepThroughAttribute()]
		public partial class InsertCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
		{

			private object[] results;

			public InsertCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
			{
				this.results = results;
			}

			public int Result
			{
				get
				{
					base.RaiseExceptionIfNecessary();
					return System.Convert.ToInt32(this.results[0]);
				}
			}
		}

		[System.Diagnostics.DebuggerStepThroughAttribute()]
		public partial class CompanyServiceClient : System.ServiceModel.ClientBase<CompanyServiceReference.ICompanyService>, CompanyServiceReference.ICompanyService
		{

			private BeginOperationDelegate onBeginGetUserDelegate;

			private EndOperationDelegate onEndGetUserDelegate;

			private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;

			private BeginOperationDelegate onBeginGetCompanyDelegate;

			private EndOperationDelegate onEndGetCompanyDelegate;

			private System.Threading.SendOrPostCallback onGetCompanyCompletedDelegate;

			private BeginOperationDelegate onBeginUpdateCompanyDelegate;

			private EndOperationDelegate onEndUpdateCompanyDelegate;

			private System.Threading.SendOrPostCallback onUpdateCompanyCompletedDelegate;

			private BeginOperationDelegate onBeginInsertCompanyDelegate;

			private EndOperationDelegate onEndInsertCompanyDelegate;

			private System.Threading.SendOrPostCallback onInsertCompanyCompletedDelegate;

			private BeginOperationDelegate onBeginDeleteCompanyDelegate;

			private EndOperationDelegate onEndDeleteCompanyDelegate;

			private System.Threading.SendOrPostCallback onDeleteCompanyCompletedDelegate;

			private BeginOperationDelegate onBeginOpenDelegate;

			private EndOperationDelegate onEndOpenDelegate;

			private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

			private BeginOperationDelegate onBeginCloseDelegate;

			private EndOperationDelegate onEndCloseDelegate;

			private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

			public CompanyServiceClient() : base()
			{
			}

			public CompanyServiceClient(string endpointConfigurationName) : base(endpointConfigurationName)
			{
			}

			public CompanyServiceClient(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}

			public CompanyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}

			public CompanyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
			{
			}

			public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;

			public event System.EventHandler<GetCompanyCompletedEventArgs> GetCompanyCompleted;

			public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCompanyCompleted;

			public event System.EventHandler<InsertCompanyCompletedEventArgs> InsertCompanyCompleted;

			public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCompanyCompleted;

			public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

			public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

			public System.IAsyncResult BeginGetUser(string userName, string password, System.AsyncCallback callback, object asyncState)
			{
				return this.CompanyServiceReference_ICompanyService_BeginGetUser(userName, password, callback, asyncState);
			}
			public System.IAsyncResult CompanyServiceReference_ICompanyService_BeginGetUser(string userName, string password, System.AsyncCallback callback, object asyncState)
			{
				return base.Channel.BeginGetUser(userName, password, callback, asyncState);
			}

			public CompanyServiceReference.UserInfo EndGetUser(System.IAsyncResult result)
			{
				return this.CompanyServiceReference_ICompanyService_EndGetUser(result);
			}
			public CompanyServiceReference.UserInfo CompanyServiceReference_ICompanyService_EndGetUser(System.IAsyncResult result)
			{
				return base.Channel.EndGetUser(result);
			}

			private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				string userName = System.Convert.ToString(inValues[0]);
				string password = System.Convert.ToString(inValues[1]);
				return ((CompanyServiceReference.ICompanyService)this).BeginGetUser(userName, password, callback, asyncState);
			}

			private object[] OnEndGetUser(System.IAsyncResult result)
			{
				CompanyServiceReference.UserInfo retVal = ((CompanyServiceReference.ICompanyService)this).EndGetUser(result);
				return new object[] {retVal};
			}

			private void OnGetUserCompleted(object state)
			{
				if ((this.GetUserCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (GetUserCompleted != null)
						GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
				}
			}

			public void GetUserAsync(string userName, string password)
			{
				this.GetUserAsync(userName, password, null);
			}

			public void GetUserAsync(string userName, string password, object userState)
			{
				if (this.onBeginGetUserDelegate == null)
				{
					this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
				}
				if (this.onEndGetUserDelegate == null)
				{
					this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
				}
				if (this.onGetUserCompletedDelegate == null)
				{
					this.onGetUserCompletedDelegate = this.OnGetUserCompleted;
				}
				base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {userName, password}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
			}

			public System.IAsyncResult BeginGetCompany(int companyId, System.AsyncCallback callback, object asyncState)
			{
				return this.CompanyServiceReference_ICompanyService_BeginGetCompany(companyId, callback, asyncState);
			}
			public System.IAsyncResult CompanyServiceReference_ICompanyService_BeginGetCompany(int companyId, System.AsyncCallback callback, object asyncState)
			{
				return base.Channel.BeginGetCompany(companyId, callback, asyncState);
			}

			public CompanyServiceReference.CompanyInfo EndGetCompany(System.IAsyncResult result)
			{
				return this.CompanyServiceReference_ICompanyService_EndGetCompany(result);
			}
			public CompanyServiceReference.CompanyInfo CompanyServiceReference_ICompanyService_EndGetCompany(System.IAsyncResult result)
			{
				return base.Channel.EndGetCompany(result);
			}

			private System.IAsyncResult OnBeginGetCompany(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				int companyId = System.Convert.ToInt32(inValues[0]);
				return ((CompanyServiceReference.ICompanyService)this).BeginGetCompany(companyId, callback, asyncState);
			}

			private object[] OnEndGetCompany(System.IAsyncResult result)
			{
				CompanyServiceReference.CompanyInfo retVal = ((CompanyServiceReference.ICompanyService)this).EndGetCompany(result);
				return new object[] {retVal};
			}

			private void OnGetCompanyCompleted(object state)
			{
				if ((this.GetCompanyCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (GetCompanyCompleted != null)
						GetCompanyCompleted(this, new GetCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
				}
			}

			public void GetCompanyAsync(int companyId)
			{
				this.GetCompanyAsync(companyId, null);
			}

			public void GetCompanyAsync(int companyId, object userState)
			{
				if (this.onBeginGetCompanyDelegate == null)
				{
					this.onBeginGetCompanyDelegate = new BeginOperationDelegate(this.OnBeginGetCompany);
				}
				if (this.onEndGetCompanyDelegate == null)
				{
					this.onEndGetCompanyDelegate = new EndOperationDelegate(this.OnEndGetCompany);
				}
				if (this.onGetCompanyCompletedDelegate == null)
				{
					this.onGetCompanyCompletedDelegate = this.OnGetCompanyCompleted;
				}
				base.InvokeAsync(this.onBeginGetCompanyDelegate, new object[] {companyId}, this.onEndGetCompanyDelegate, this.onGetCompanyCompletedDelegate, userState);
			}

			public System.IAsyncResult BeginUpdateCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
			{
				return this.CompanyServiceReference_ICompanyService_BeginUpdateCompany(company, callback, asyncState);
			}
			public System.IAsyncResult CompanyServiceReference_ICompanyService_BeginUpdateCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
			{
				return base.Channel.BeginUpdateCompany(company, callback, asyncState);
			}

			public void EndUpdateCompany(System.IAsyncResult result)
			{
				this.CompanyServiceReference_ICompanyService_EndUpdateCompany(result);
			}
			public void CompanyServiceReference_ICompanyService_EndUpdateCompany(System.IAsyncResult result)
			{
				base.Channel.EndUpdateCompany(result);
			}

			private System.IAsyncResult OnBeginUpdateCompany(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				CompanyServiceReference.CompanyInfo company = (CompanyServiceReference.CompanyInfo)(inValues[0]);
				return ((CompanyServiceReference.ICompanyService)this).BeginUpdateCompany(company, callback, asyncState);
			}

			private object[] OnEndUpdateCompany(System.IAsyncResult result)
			{
				((CompanyServiceReference.ICompanyService)this).EndUpdateCompany(result);
				return null;
			}

			private void OnUpdateCompanyCompleted(object state)
			{
				if ((this.UpdateCompanyCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (UpdateCompanyCompleted != null)
						UpdateCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
				}
			}

			public void UpdateCompanyAsync(CompanyServiceReference.CompanyInfo company)
			{
				this.UpdateCompanyAsync(company, null);
			}

			public void UpdateCompanyAsync(CompanyServiceReference.CompanyInfo company, object userState)
			{
				if (this.onBeginUpdateCompanyDelegate == null)
				{
					this.onBeginUpdateCompanyDelegate = new BeginOperationDelegate(this.OnBeginUpdateCompany);
				}
				if (this.onEndUpdateCompanyDelegate == null)
				{
					this.onEndUpdateCompanyDelegate = new EndOperationDelegate(this.OnEndUpdateCompany);
				}
				if (this.onUpdateCompanyCompletedDelegate == null)
				{
					this.onUpdateCompanyCompletedDelegate = this.OnUpdateCompanyCompleted;
				}
				base.InvokeAsync(this.onBeginUpdateCompanyDelegate, new object[] {company}, this.onEndUpdateCompanyDelegate, this.onUpdateCompanyCompletedDelegate, userState);
			}

			public System.IAsyncResult BeginInsertCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
			{
				return this.CompanyServiceReference_ICompanyService_BeginInsertCompany(company, callback, asyncState);
			}
			public System.IAsyncResult CompanyServiceReference_ICompanyService_BeginInsertCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
			{
				return base.Channel.BeginInsertCompany(company, callback, asyncState);
			}

			public int EndInsertCompany(System.IAsyncResult result)
			{
				return this.CompanyServiceReference_ICompanyService_EndInsertCompany(result);
			}
			public int CompanyServiceReference_ICompanyService_EndInsertCompany(System.IAsyncResult result)
			{
				return base.Channel.EndInsertCompany(result);
			}

			private System.IAsyncResult OnBeginInsertCompany(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				CompanyServiceReference.CompanyInfo company = (CompanyServiceReference.CompanyInfo)(inValues[0]);
				return ((CompanyServiceReference.ICompanyService)this).BeginInsertCompany(company, callback, asyncState);
			}

			private object[] OnEndInsertCompany(System.IAsyncResult result)
			{
				int retVal = ((CompanyServiceReference.ICompanyService)this).EndInsertCompany(result);
				return new object[] {retVal};
			}

			private void OnInsertCompanyCompleted(object state)
			{
				if ((this.InsertCompanyCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (InsertCompanyCompleted != null)
						InsertCompanyCompleted(this, new InsertCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
				}
			}

			public void InsertCompanyAsync(CompanyServiceReference.CompanyInfo company)
			{
				this.InsertCompanyAsync(company, null);
			}

			public void InsertCompanyAsync(CompanyServiceReference.CompanyInfo company, object userState)
			{
				if (this.onBeginInsertCompanyDelegate == null)
				{
					this.onBeginInsertCompanyDelegate = new BeginOperationDelegate(this.OnBeginInsertCompany);
				}
				if (this.onEndInsertCompanyDelegate == null)
				{
					this.onEndInsertCompanyDelegate = new EndOperationDelegate(this.OnEndInsertCompany);
				}
				if (this.onInsertCompanyCompletedDelegate == null)
				{
					this.onInsertCompanyCompletedDelegate = this.OnInsertCompanyCompleted;
				}
				base.InvokeAsync(this.onBeginInsertCompanyDelegate, new object[] {company}, this.onEndInsertCompanyDelegate, this.onInsertCompanyCompletedDelegate, userState);
			}

			public System.IAsyncResult BeginDeleteCompany(int companyId, System.AsyncCallback callback, object asyncState)
			{
				return this.CompanyServiceReference_ICompanyService_BeginDeleteCompany(companyId, callback, asyncState);
			}
			public System.IAsyncResult CompanyServiceReference_ICompanyService_BeginDeleteCompany(int companyId, System.AsyncCallback callback, object asyncState)
			{
				return base.Channel.BeginDeleteCompany(companyId, callback, asyncState);
			}

			public void EndDeleteCompany(System.IAsyncResult result)
			{
				this.CompanyServiceReference_ICompanyService_EndDeleteCompany(result);
			}
			public void CompanyServiceReference_ICompanyService_EndDeleteCompany(System.IAsyncResult result)
			{
				base.Channel.EndDeleteCompany(result);
			}

			private System.IAsyncResult OnBeginDeleteCompany(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				int companyId = System.Convert.ToInt32(inValues[0]);
				return ((CompanyServiceReference.ICompanyService)this).BeginDeleteCompany(companyId, callback, asyncState);
			}

			private object[] OnEndDeleteCompany(System.IAsyncResult result)
			{
				((CompanyServiceReference.ICompanyService)this).EndDeleteCompany(result);
				return null;
			}

			private void OnDeleteCompanyCompleted(object state)
			{
				if ((this.DeleteCompanyCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (DeleteCompanyCompleted != null)
						DeleteCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
				}
			}

			public void DeleteCompanyAsync(int companyId)
			{
				this.DeleteCompanyAsync(companyId, null);
			}

			public void DeleteCompanyAsync(int companyId, object userState)
			{
				if (this.onBeginDeleteCompanyDelegate == null)
				{
					this.onBeginDeleteCompanyDelegate = new BeginOperationDelegate(this.OnBeginDeleteCompany);
				}
				if (this.onEndDeleteCompanyDelegate == null)
				{
					this.onEndDeleteCompanyDelegate = new EndOperationDelegate(this.OnEndDeleteCompany);
				}
				if (this.onDeleteCompanyCompletedDelegate == null)
				{
					this.onDeleteCompanyCompletedDelegate = this.OnDeleteCompanyCompleted;
				}
				base.InvokeAsync(this.onBeginDeleteCompanyDelegate, new object[] {companyId}, this.onEndDeleteCompanyDelegate, this.onDeleteCompanyCompletedDelegate, userState);
			}

			private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				return ((System.ServiceModel.ICommunicationObject)this).BeginOpen(callback, asyncState);
			}

			private object[] OnEndOpen(System.IAsyncResult result)
			{
				((System.ServiceModel.ICommunicationObject)this).EndOpen(result);
				return null;
			}

			private void OnOpenCompleted(object state)
			{
				if ((this.OpenCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (OpenCompleted != null)
						OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
				}
			}

			public void OpenAsync()
			{
				this.OpenAsync(null);
			}

			public void OpenAsync(object userState)
			{
				if (this.onBeginOpenDelegate == null)
				{
					this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
				}
				if (this.onEndOpenDelegate == null)
				{
					this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
				}
				if (this.onOpenCompletedDelegate == null)
				{
					this.onOpenCompletedDelegate = this.OnOpenCompleted;
				}
				base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
			}

			private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
			{
				return ((System.ServiceModel.ICommunicationObject)this).BeginClose(callback, asyncState);
			}

			private object[] OnEndClose(System.IAsyncResult result)
			{
				((System.ServiceModel.ICommunicationObject)this).EndClose(result);
				return null;
			}

			private void OnCloseCompleted(object state)
			{
				if ((this.CloseCompleted) != null)
				{
					InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
					if (CloseCompleted != null)
						CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
				}
			}

			public void CloseAsync()
			{
				this.CloseAsync(null);
			}

			public void CloseAsync(object userState)
			{
				if (this.onBeginCloseDelegate == null)
				{
					this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
				}
				if (this.onEndCloseDelegate == null)
				{
					this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
				}
				if (this.onCloseCompletedDelegate == null)
				{
					this.onCloseCompletedDelegate = this.OnCloseCompleted;
				}
				base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
			}

			protected override CompanyServiceReference.ICompanyService CreateChannel()
			{
				return new CompanyServiceClientChannel(this);
			}

			private class CompanyServiceClientChannel : ChannelBase<CompanyServiceReference.ICompanyService>, CompanyServiceReference.ICompanyService
			{

				public CompanyServiceClientChannel(System.ServiceModel.ClientBase<CompanyServiceReference.ICompanyService> client) : base(client)
				{
				}

				public System.IAsyncResult BeginGetUser(string userName, string password, System.AsyncCallback callback, object asyncState)
				{
					object[] _args = new object[(2)];
					_args[0] = userName;
					_args[1] = password;
					System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
					return _result;
				}

				public CompanyServiceReference.UserInfo EndGetUser(System.IAsyncResult result)
				{
					object[] _args = new object[(0)];
					CompanyServiceReference.UserInfo _result = (CompanyServiceReference.UserInfo)(base.EndInvoke("GetUser", _args, result));
					return _result;
				}

				public System.IAsyncResult BeginGetCompany(int companyId, System.AsyncCallback callback, object asyncState)
				{
					object[] _args = new object[(1)];
					_args[0] = companyId;
					System.IAsyncResult _result = base.BeginInvoke("GetCompany", _args, callback, asyncState);
					return _result;
				}

				public CompanyServiceReference.CompanyInfo EndGetCompany(System.IAsyncResult result)
				{
					object[] _args = new object[(0)];
					CompanyServiceReference.CompanyInfo _result = (CompanyServiceReference.CompanyInfo)(base.EndInvoke("GetCompany", _args, result));
					return _result;
				}

				public System.IAsyncResult BeginUpdateCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
				{
					object[] _args = new object[(1)];
					_args[0] = company;
					System.IAsyncResult _result = base.BeginInvoke("UpdateCompany", _args, callback, asyncState);
					return _result;
				}

				public void EndUpdateCompany(System.IAsyncResult result)
				{
					object[] _args = new object[(0)];
					base.EndInvoke("UpdateCompany", _args, result);
				}

				public System.IAsyncResult BeginInsertCompany(CompanyServiceReference.CompanyInfo company, System.AsyncCallback callback, object asyncState)
				{
					object[] _args = new object[(1)];
					_args[0] = company;
					System.IAsyncResult _result = base.BeginInvoke("InsertCompany", _args, callback, asyncState);
					return _result;
				}

				public int EndInsertCompany(System.IAsyncResult result)
				{
					object[] _args = new object[(0)];
					int _result = System.Convert.ToInt32(base.EndInvoke("InsertCompany", _args, result));
					return _result;
				}

				public System.IAsyncResult BeginDeleteCompany(int companyId, System.AsyncCallback callback, object asyncState)
				{
					object[] _args = new object[(1)];
					_args[0] = companyId;
					System.IAsyncResult _result = base.BeginInvoke("DeleteCompany", _args, callback, asyncState);
					return _result;
				}

				public void EndDeleteCompany(System.IAsyncResult result)
				{
					object[] _args = new object[(0)];
					base.EndInvoke("DeleteCompany", _args, result);
				}
			}
		}
	}

} //end of root namespace