<?xml version="1.0" encoding="utf-8"?>

<root>

  <!-- 

    Microsoft ResX Schema 

    

    Version 2.0

    

    The primary goals of this format is to allow a simple XML format 

    that is mostly human readable. The generation and parsing of the 

    various data types are done through the TypeConverter classes 

    associated with the data types.

    

    Example:

    

    ... ado.net/XML headers & schema ...

    <resheader name="resmimetype">text/microsoft-resx</resheader>

    <resheader name="version">2.0</resheader>

    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>

    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>

    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>

    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>

    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">

        <value>[base64 mime encoded serialized .NET Framework object]</value>

    </data>

    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">

        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>

        <comment>This is a comment</comment>

    </data>

                

    There are any number of "resheader" rows that contain simple 

    name/value pairs.

    

    Each data row contains a name, and value. The row also contains a 

    type or mimetype. Type corresponds to a .NET class that support 

    text/value conversion through the TypeConverter architecture. 

    Classes that don't support this are serialized and stored with the 

    mimetype set.

    

    The mimetype is used for serialized objects, and tells the 

    ResXResourceReader how to depersist the object. This is currently not 

    extensible. For a given mimetype the value must be set accordingly:

    

    Note - application/x-microsoft.net.object.binary.base64 is the format 

    that the ResXResourceWriter will generate, however the reader can 

    read any of the formats listed below.

    

    mimetype: application/x-microsoft.net.object.binary.base64

    value   : The object must be serialized with 

            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter

            : and then encoded with base64 encoding.

    

    mimetype: application/x-microsoft.net.object.soap.base64

    value   : The object must be serialized with 

            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter

            : and then encoded with base64 encoding.



    mimetype: application/x-microsoft.net.object.bytearray.base64

    value   : The object must be serialized into a byte array 

            : using a System.ComponentModel.TypeConverter

            : and then encoded with base64 encoding.

    -->

  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />

    <xsd:element name="root" msdata:IsDataSet="true">

      <xsd:complexType>

        <xsd:choice maxOccurs="unbounded">

          <xsd:element name="metadata">

            <xsd:complexType>

              <xsd:sequence>

                <xsd:element name="value" type="xsd:string" minOccurs="0" />

              </xsd:sequence>

              <xsd:attribute name="name" use="required" type="xsd:string" />

              <xsd:attribute name="type" type="xsd:string" />

              <xsd:attribute name="mimetype" type="xsd:string" />

              <xsd:attribute ref="xml:space" />

            </xsd:complexType>

          </xsd:element>

          <xsd:element name="assembly">

            <xsd:complexType>

              <xsd:attribute name="alias" type="xsd:string" />

              <xsd:attribute name="name" type="xsd:string" />

            </xsd:complexType>

          </xsd:element>

          <xsd:element name="data">

            <xsd:complexType>

              <xsd:sequence>

                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />

                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />

              </xsd:sequence>

              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />

              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />

              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />

              <xsd:attribute ref="xml:space" />

            </xsd:complexType>

          </xsd:element>

          <xsd:element name="resheader">

            <xsd:complexType>

              <xsd:sequence>

                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />

              </xsd:sequence>

              <xsd:attribute name="name" type="xsd:string" use="required" />

            </xsd:complexType>

          </xsd:element>

        </xsd:choice>

      </xsd:complexType>

    </xsd:element>

  </xsd:schema>

  <resheader name="resmimetype">

    <value>text/microsoft-resx</value>

  </resheader>

  <resheader name="version">

    <value>2.0</value>

  </resheader>

  <resheader name="reader">

    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>

  </resheader>

  <resheader name="writer">

    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>

  </resheader>

  <data name="ClearInvalidException" xml:space="preserve">

    <value>Clear is an invalid operation</value>

  </data>

  <data name="InsertInvalidException" xml:space="preserve">

    <value>Insert is an invalid operation</value>

  </data>

  <data name="RemoveInvalidException" xml:space="preserve">

    <value>Remove is an invalid operation</value>

  </data>

  <data name="ChangeInvalidException" xml:space="preserve">

    <value>Changing an element is an invalid operation</value>

  </data>

  <data name="ParentSetException" xml:space="preserve">

    <value>Parent value can only be set for child objects</value>

  </data>

  <data name="ChildDeleteException" xml:space="preserve">

    <value>Can not directly mark a child object for deletion - use its parent collection</value>

  </data>

  <data name="NoDeleteRootException" xml:space="preserve">

    <value>Invalid for root objects - use Delete instead</value>

  </data>

  <data name="NoSaveChildException" xml:space="preserve">

    <value>Can not directly save a child object</value>

  </data>

  <data name="NoSaveEditingException" xml:space="preserve">

    <value>Object is still being edited and can not be saved</value>

  </data>

  <data name="NoSaveInvalidException" xml:space="preserve">

    <value>Object is not valid and can not be saved</value>

  </data>

  <data name="CreateNotSupportedException" xml:space="preserve">

    <value>Invalid operation - create not allowed</value>

  </data>

  <data name="FetchNotSupportedException" xml:space="preserve">

    <value>Invalid operation - fetch not allowed</value>

  </data>

  <data name="UpdateNotSupportedException" xml:space="preserve">

    <value>Invalid operation - update not allowed</value>

  </data>

  <data name="DeleteNotSupportedException" xml:space="preserve">

    <value>Invalid operation - delete not allowed</value>

  </data>

  <data name="NoBeginEditChildException" xml:space="preserve">

    <value>BeginEdit is not valid on a child object</value>

  </data>

  <data name="NoCancelEditChildException" xml:space="preserve">

    <value>CancelEdit is not valid on a child object</value>

  </data>

  <data name="NoApplyEditChildException" xml:space="preserve">

    <value>ApplyEdit is not valid on a child object</value>

  </data>

  <data name="NoSuchValueExistsException" xml:space="preserve">

    <value>No such value exists:</value>

  </data>

  <data name="ErrorReadingValueException" xml:space="preserve">

    <value>Error reading value:</value>

  </data>

  <data name="NoInsertReadOnlyException" xml:space="preserve">

    <value>Insert is invalid for a read-only collection</value>

  </data>

  <data name="NoRemoveReadOnlyException" xml:space="preserve">

    <value>Remove is invalid for a read-only collection</value>

  </data>

  <data name="NoClearReadOnlyException" xml:space="preserve">

    <value>Clear is invalid for a read-only collection</value>

  </data>

  <data name="NoChangeReadOnlyException" xml:space="preserve">

    <value>Items can not be changed in a read-only collection</value>

  </data>

  <data name="StringToDateException" xml:space="preserve">

    <value>String value can not be converted to a date</value>

  </data>

  <data name="ValueNotSmartDateException" xml:space="preserve">

    <value>Value is not a SmartDate</value>

  </data>

  <data name="InvalidDateException" xml:space="preserve">

    <value>Value must be a valid date</value>

  </data>

  <data name="SortingNotSupportedException" xml:space="preserve">

    <value>Sorting is not supported by this collection</value>

  </data>

  <data name="SearchingNotSupportedException" xml:space="preserve">

    <value>Searching is not supported by this collection</value>

  </data>

  <data name="AddItemException" xml:space="preserve">

    <value>Adding items not allowed</value>

  </data>

  <data name="NoPrincipalAllowedException" xml:space="preserve">

    <value>No principal object should be passed to DataPortal when using Windows integrated security</value>

  </data>

  <data name="BusinessPrincipalException" xml:space="preserve">

    <value>Principal must be of type BusinessPrincipal, not</value>

  </data>

  <data name="NoMatchException" xml:space="preserve">

    <value>No matching item in collection</value>

  </data>

  <data name="SecurityDataBase" xml:space="preserve">

    <value>Security</value>

  </data>

  <data name="SecurityStoredProcedure" xml:space="preserve">

    <value>Login</value>

  </data>

  <data name="SecurityUserParam" xml:space="preserve">

    <value>@user</value>

  </data>

  <data name="SecurityPasswordParam" xml:space="preserve">

    <value>@pw</value>

  </data>

  <data name="SmartDateT" xml:space="preserve">

    <value>t</value>

  </data>

  <data name="SmartDateToday" xml:space="preserve">

    <value>today</value>

  </data>

  <data name="SmartDateY" xml:space="preserve">

    <value>y</value>

  </data>

  <data name="SmartDateYesterday" xml:space="preserve">

    <value>yesterday</value>

  </data>

  <data name="SmartDateTom" xml:space="preserve">

    <value>tom</value>

  </data>

  <data name="SmartDateTomorrow" xml:space="preserve">

    <value>tomorrow</value>

  </data>

  <data name="BatchQueueJobCompleted" xml:space="preserve">

    <value>Batch job completed</value>

  </data>

  <data name="BatchQueueJobPrefix" xml:space="preserve">

    <value>Batch job:</value>

  </data>

  <data name="BatchQueueJobObjectPrefix" xml:space="preserve">

    <value>Job object:</value>

  </data>

  <data name="BatchQueueJobFailed" xml:space="preserve">

    <value>Batch job failed due to execution error </value>

  </data>

  <data name="BatchQueueProcStarted" xml:space="preserve">

    <value>Batch queue processor started</value>

  </data>

  <data name="BatchQueueProcName" xml:space="preserve">

    <value>Name:</value>

  </data>

  <data name="BatchQueueProcPort" xml:space="preserve">

    <value>Port:</value>

  </data>

  <data name="BatchQueueProcQueue" xml:space="preserve">

    <value>Queue:</value>

  </data>

  <data name="BatchQueueProcMaxJobs" xml:space="preserve">

    <value>Max jobs:</value>

  </data>

  <data name="Failed" xml:space="preserve">

    <value>failed</value>

  </data>

  <data name="FailedOnServer" xml:space="preserve">

    <value>failed on the server</value>

  </data>

  <data name="MethodCallFailed" xml:space="preserve">

    <value>method call failed</value>

  </data>

  <data name="MethodNotImplemented" xml:space="preserve">

    <value>not implemented</value>

  </data>

  <data name="ExecuteNotSupportedException" xml:space="preserve">

    <value>Invalid operation - execute not allowed</value>

  </data>

  <data name="InsertNotSupportedException" xml:space="preserve">

    <value>Invalid operation - insert not allowed</value>

  </data>

  <data name="GetIdValueCantBeNull" xml:space="preserve">

    <value>GetIdValue must not return Nothing</value>

  </data>

</root>