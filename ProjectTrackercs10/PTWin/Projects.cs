//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PTWin {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Projects : DataSet {
        
        private ProjectDataTable tableProject;
        
        private ProjectResourcesDataTable tableProjectResources;
        
        public Projects() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Projects(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Project"] != null)) {
                    this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["ProjectResources"] != null)) {
                    this.Tables.Add(new ProjectResourcesDataTable(ds.Tables["ProjectResources"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectResourcesDataTable ProjectResources {
            get {
                return this.tableProjectResources;
            }
        }
        
        public override DataSet Clone() {
            Projects cln = ((Projects)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Project"] != null)) {
                this.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
            }
            if ((ds.Tables["ProjectResources"] != null)) {
                this.Tables.Add(new ProjectResourcesDataTable(ds.Tables["ProjectResources"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProject = ((ProjectDataTable)(this.Tables["Project"]));
            if ((this.tableProject != null)) {
                this.tableProject.InitVars();
            }
            this.tableProjectResources = ((ProjectResourcesDataTable)(this.Tables["ProjectResources"]));
            if ((this.tableProjectResources != null)) {
                this.tableProjectResources.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Projects";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Projects.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProject = new ProjectDataTable();
            this.Tables.Add(this.tableProject);
            this.tableProjectResources = new ProjectResourcesDataTable();
            this.Tables.Add(this.tableProjectResources);
        }
        
        private bool ShouldSerializeProject() {
            return false;
        }
        
        private bool ShouldSerializeProjectResources() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void ProjectResourcesRowChangeEventHandler(object sender, ProjectResourcesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnName;
            
            private DataColumn columnStarted;
            
            private DataColumn columnEnded;
            
            internal ProjectDataTable() : 
                    base("Project") {
                this.InitClass();
            }
            
            internal ProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn StartedColumn {
                get {
                    return this.columnStarted;
                }
            }
            
            internal DataColumn EndedColumn {
                get {
                    return this.columnEnded;
                }
            }
            
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectRow AddProjectRow(string ID, string Name, string Started, string Ended) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                rowProjectRow.ItemArray = new object[] {
                        ID,
                        Name,
                        Started,
                        Ended};
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnName = this.Columns["Name"];
                this.columnStarted = this.Columns["Started"];
                this.columnEnded = this.Columns["Ended"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStarted = new DataColumn("Started", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStarted);
                this.columnEnded = new DataColumn("Ended", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnded);
            }
            
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRow : DataRow {
            
            private ProjectDataTable tableProject;
            
            internal ProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableProject.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.IDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableProject.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.NameColumn] = value;
                }
            }
            
            public string Started {
                get {
                    try {
                        return ((string)(this[this.tableProject.StartedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.StartedColumn] = value;
                }
            }
            
            public string Ended {
                get {
                    try {
                        return ((string)(this[this.tableProject.EndedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.EndedColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableProject.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableProject.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableProject.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableProject.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartedNull() {
                return this.IsNull(this.tableProject.StartedColumn);
            }
            
            public void SetStartedNull() {
                this[this.tableProject.StartedColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndedNull() {
                return this.IsNull(this.tableProject.EndedColumn);
            }
            
            public void SetEndedNull() {
                this[this.tableProject.EndedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectRowChangeEvent : EventArgs {
            
            private ProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectRowChangeEvent(ProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectResourcesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnAssigned;
            
            private DataColumn columnRole;
            
            internal ProjectResourcesDataTable() : 
                    base("ProjectResources") {
                this.InitClass();
            }
            
            internal ProjectResourcesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn AssignedColumn {
                get {
                    return this.columnAssigned;
                }
            }
            
            internal DataColumn RoleColumn {
                get {
                    return this.columnRole;
                }
            }
            
            public ProjectResourcesRow this[int index] {
                get {
                    return ((ProjectResourcesRow)(this.Rows[index]));
                }
            }
            
            public event ProjectResourcesRowChangeEventHandler ProjectResourcesRowChanged;
            
            public event ProjectResourcesRowChangeEventHandler ProjectResourcesRowChanging;
            
            public event ProjectResourcesRowChangeEventHandler ProjectResourcesRowDeleted;
            
            public event ProjectResourcesRowChangeEventHandler ProjectResourcesRowDeleting;
            
            public void AddProjectResourcesRow(ProjectResourcesRow row) {
                this.Rows.Add(row);
            }
            
            public ProjectResourcesRow AddProjectResourcesRow(string FirstName, string LastName, string Assigned, string Role) {
                ProjectResourcesRow rowProjectResourcesRow = ((ProjectResourcesRow)(this.NewRow()));
                rowProjectResourcesRow.ItemArray = new object[] {
                        FirstName,
                        LastName,
                        Assigned,
                        Role};
                this.Rows.Add(rowProjectResourcesRow);
                return rowProjectResourcesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProjectResourcesDataTable cln = ((ProjectResourcesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProjectResourcesDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnAssigned = this.Columns["Assigned"];
                this.columnRole = this.Columns["Role"];
            }
            
            private void InitClass() {
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnAssigned = new DataColumn("Assigned", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssigned);
                this.columnRole = new DataColumn("Role", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRole);
            }
            
            public ProjectResourcesRow NewProjectResourcesRow() {
                return ((ProjectResourcesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProjectResourcesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProjectResourcesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectResourcesRowChanged != null)) {
                    this.ProjectResourcesRowChanged(this, new ProjectResourcesRowChangeEvent(((ProjectResourcesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectResourcesRowChanging != null)) {
                    this.ProjectResourcesRowChanging(this, new ProjectResourcesRowChangeEvent(((ProjectResourcesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectResourcesRowDeleted != null)) {
                    this.ProjectResourcesRowDeleted(this, new ProjectResourcesRowChangeEvent(((ProjectResourcesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectResourcesRowDeleting != null)) {
                    this.ProjectResourcesRowDeleting(this, new ProjectResourcesRowChangeEvent(((ProjectResourcesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProjectResourcesRow(ProjectResourcesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectResourcesRow : DataRow {
            
            private ProjectResourcesDataTable tableProjectResources;
            
            internal ProjectResourcesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectResources = ((ProjectResourcesDataTable)(this.Table));
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableProjectResources.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectResources.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableProjectResources.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectResources.LastNameColumn] = value;
                }
            }
            
            public string Assigned {
                get {
                    try {
                        return ((string)(this[this.tableProjectResources.AssignedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectResources.AssignedColumn] = value;
                }
            }
            
            public string Role {
                get {
                    try {
                        return ((string)(this[this.tableProjectResources.RoleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectResources.RoleColumn] = value;
                }
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableProjectResources.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableProjectResources.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableProjectResources.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableProjectResources.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignedNull() {
                return this.IsNull(this.tableProjectResources.AssignedColumn);
            }
            
            public void SetAssignedNull() {
                this[this.tableProjectResources.AssignedColumn] = System.Convert.DBNull;
            }
            
            public bool IsRoleNull() {
                return this.IsNull(this.tableProjectResources.RoleColumn);
            }
            
            public void SetRoleNull() {
                this[this.tableProjectResources.RoleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProjectResourcesRowChangeEvent : EventArgs {
            
            private ProjectResourcesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProjectResourcesRowChangeEvent(ProjectResourcesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProjectResourcesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
